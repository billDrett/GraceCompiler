/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import java.util.*;
import compiler.analysis.*;

@SuppressWarnings("nls")
public final class AFparDefinition extends PFparDefinition
{
    private TReference _reference_;
    private final LinkedList<PVarIdentifier> _varIdentifier_ = new LinkedList<PVarIdentifier>();
    private PFparType _fparType_;

    public AFparDefinition()
    {
        // Constructor
    }

    public AFparDefinition(
        @SuppressWarnings("hiding") TReference _reference_,
        @SuppressWarnings("hiding") List<PVarIdentifier> _varIdentifier_,
        @SuppressWarnings("hiding") PFparType _fparType_)
    {
        // Constructor
        setReference(_reference_);

        setVarIdentifier(_varIdentifier_);

        setFparType(_fparType_);

    }

    @Override
    public Object clone()
    {
        return new AFparDefinition(
            cloneNode(this._reference_),
            cloneList(this._varIdentifier_),
            cloneNode(this._fparType_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFparDefinition(this);
    }

    public TReference getReference()
    {
        return this._reference_;
    }

    public void setReference(TReference node)
    {
        if(this._reference_ != null)
        {
            this._reference_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._reference_ = node;
    }

    public LinkedList<PVarIdentifier> getVarIdentifier()
    {
        return this._varIdentifier_;
    }

    public void setVarIdentifier(List<PVarIdentifier> list)
    {
        this._varIdentifier_.clear();
        this._varIdentifier_.addAll(list);
        for(PVarIdentifier e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public PFparType getFparType()
    {
        return this._fparType_;
    }

    public void setFparType(PFparType node)
    {
        if(this._fparType_ != null)
        {
            this._fparType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fparType_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._reference_)
            + toString(this._varIdentifier_)
            + toString(this._fparType_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._reference_ == child)
        {
            this._reference_ = null;
            return;
        }

        if(this._varIdentifier_.remove(child))
        {
            return;
        }

        if(this._fparType_ == child)
        {
            this._fparType_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._reference_ == oldChild)
        {
            setReference((TReference) newChild);
            return;
        }

        for(ListIterator<PVarIdentifier> i = this._varIdentifier_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PVarIdentifier) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._fparType_ == oldChild)
        {
            setFparType((PFparType) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
