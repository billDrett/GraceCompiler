/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import compiler.analysis.*;

@SuppressWarnings("nls")
public final class ACondCond extends PCond
{
    private PCondAnd _condAnd_;

    public ACondCond()
    {
        // Constructor
    }

    public ACondCond(
        @SuppressWarnings("hiding") PCondAnd _condAnd_)
    {
        // Constructor
        setCondAnd(_condAnd_);

    }

    @Override
    public Object clone()
    {
        return new ACondCond(
            cloneNode(this._condAnd_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACondCond(this);
    }

    public PCondAnd getCondAnd()
    {
        return this._condAnd_;
    }

    public void setCondAnd(PCondAnd node)
    {
        if(this._condAnd_ != null)
        {
            this._condAnd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._condAnd_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._condAnd_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._condAnd_ == child)
        {
            this._condAnd_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._condAnd_ == oldChild)
        {
            setCondAnd((PCondAnd) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
