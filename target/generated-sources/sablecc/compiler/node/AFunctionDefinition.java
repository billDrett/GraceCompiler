/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import java.util.*;
import compiler.analysis.*;

@SuppressWarnings("nls")
public final class AFunctionDefinition extends PFunctionDefinition
{
    private PHeader _header_;
    private final LinkedList<PLocalDefinition> _localDefinition_ = new LinkedList<PLocalDefinition>();
    private PBlock _block_;

    public AFunctionDefinition()
    {
        // Constructor
    }

    public AFunctionDefinition(
        @SuppressWarnings("hiding") PHeader _header_,
        @SuppressWarnings("hiding") List<PLocalDefinition> _localDefinition_,
        @SuppressWarnings("hiding") PBlock _block_)
    {
        // Constructor
        setHeader(_header_);

        setLocalDefinition(_localDefinition_);

        setBlock(_block_);

    }

    @Override
    public Object clone()
    {
        return new AFunctionDefinition(
            cloneNode(this._header_),
            cloneList(this._localDefinition_),
            cloneNode(this._block_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFunctionDefinition(this);
    }

    public PHeader getHeader()
    {
        return this._header_;
    }

    public void setHeader(PHeader node)
    {
        if(this._header_ != null)
        {
            this._header_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._header_ = node;
    }

    public LinkedList<PLocalDefinition> getLocalDefinition()
    {
        return this._localDefinition_;
    }

    public void setLocalDefinition(List<PLocalDefinition> list)
    {
        this._localDefinition_.clear();
        this._localDefinition_.addAll(list);
        for(PLocalDefinition e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public PBlock getBlock()
    {
        return this._block_;
    }

    public void setBlock(PBlock node)
    {
        if(this._block_ != null)
        {
            this._block_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._block_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._header_)
            + toString(this._localDefinition_)
            + toString(this._block_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._header_ == child)
        {
            this._header_ = null;
            return;
        }

        if(this._localDefinition_.remove(child))
        {
            return;
        }

        if(this._block_ == child)
        {
            this._block_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._header_ == oldChild)
        {
            setHeader((PHeader) newChild);
            return;
        }

        for(ListIterator<PLocalDefinition> i = this._localDefinition_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PLocalDefinition) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._block_ == oldChild)
        {
            setBlock((PBlock) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
