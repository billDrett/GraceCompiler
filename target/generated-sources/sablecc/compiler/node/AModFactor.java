/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import compiler.analysis.*;

@SuppressWarnings("nls")
public final class AModFactor extends PFactor
{
    private PFactor _factor_;
    private TMod _mod_;
    private PExprPar _exprPar_;

    public AModFactor()
    {
        // Constructor
    }

    public AModFactor(
        @SuppressWarnings("hiding") PFactor _factor_,
        @SuppressWarnings("hiding") TMod _mod_,
        @SuppressWarnings("hiding") PExprPar _exprPar_)
    {
        // Constructor
        setFactor(_factor_);

        setMod(_mod_);

        setExprPar(_exprPar_);

    }

    @Override
    public Object clone()
    {
        return new AModFactor(
            cloneNode(this._factor_),
            cloneNode(this._mod_),
            cloneNode(this._exprPar_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAModFactor(this);
    }

    public PFactor getFactor()
    {
        return this._factor_;
    }

    public void setFactor(PFactor node)
    {
        if(this._factor_ != null)
        {
            this._factor_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._factor_ = node;
    }

    public TMod getMod()
    {
        return this._mod_;
    }

    public void setMod(TMod node)
    {
        if(this._mod_ != null)
        {
            this._mod_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._mod_ = node;
    }

    public PExprPar getExprPar()
    {
        return this._exprPar_;
    }

    public void setExprPar(PExprPar node)
    {
        if(this._exprPar_ != null)
        {
            this._exprPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exprPar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._factor_)
            + toString(this._mod_)
            + toString(this._exprPar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._factor_ == child)
        {
            this._factor_ = null;
            return;
        }

        if(this._mod_ == child)
        {
            this._mod_ = null;
            return;
        }

        if(this._exprPar_ == child)
        {
            this._exprPar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._factor_ == oldChild)
        {
            setFactor((PFactor) newChild);
            return;
        }

        if(this._mod_ == oldChild)
        {
            setMod((TMod) newChild);
            return;
        }

        if(this._exprPar_ == oldChild)
        {
            setExprPar((PExprPar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
