/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import compiler.analysis.*;

@SuppressWarnings("nls")
public final class AIfWithElseStatement extends PStatement
{
    private PCondition _condition_;
    private PStatement _id1_;
    private PStatement _id2_;

    public AIfWithElseStatement()
    {
        // Constructor
    }

    public AIfWithElseStatement(
        @SuppressWarnings("hiding") PCondition _condition_,
        @SuppressWarnings("hiding") PStatement _id1_,
        @SuppressWarnings("hiding") PStatement _id2_)
    {
        // Constructor
        setCondition(_condition_);

        setId1(_id1_);

        setId2(_id2_);

    }

    @Override
    public Object clone()
    {
        return new AIfWithElseStatement(
            cloneNode(this._condition_),
            cloneNode(this._id1_),
            cloneNode(this._id2_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfWithElseStatement(this);
    }

    public PCondition getCondition()
    {
        return this._condition_;
    }

    public void setCondition(PCondition node)
    {
        if(this._condition_ != null)
        {
            this._condition_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._condition_ = node;
    }

    public PStatement getId1()
    {
        return this._id1_;
    }

    public void setId1(PStatement node)
    {
        if(this._id1_ != null)
        {
            this._id1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id1_ = node;
    }

    public PStatement getId2()
    {
        return this._id2_;
    }

    public void setId2(PStatement node)
    {
        if(this._id2_ != null)
        {
            this._id2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id2_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._condition_)
            + toString(this._id1_)
            + toString(this._id2_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._condition_ == child)
        {
            this._condition_ = null;
            return;
        }

        if(this._id1_ == child)
        {
            this._id1_ = null;
            return;
        }

        if(this._id2_ == child)
        {
            this._id2_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._condition_ == oldChild)
        {
            setCondition((PCondition) newChild);
            return;
        }

        if(this._id1_ == oldChild)
        {
            setId1((PStatement) newChild);
            return;
        }

        if(this._id2_ == oldChild)
        {
            setId2((PStatement) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
