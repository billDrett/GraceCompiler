/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import compiler.analysis.*;

@SuppressWarnings("nls")
public final class ACondRelatCondRelat extends PCondRelat
{
    private PExpr _id1_;
    private PRelatOper _relatOper_;
    private PExpr _id2_;

    public ACondRelatCondRelat()
    {
        // Constructor
    }

    public ACondRelatCondRelat(
        @SuppressWarnings("hiding") PExpr _id1_,
        @SuppressWarnings("hiding") PRelatOper _relatOper_,
        @SuppressWarnings("hiding") PExpr _id2_)
    {
        // Constructor
        setId1(_id1_);

        setRelatOper(_relatOper_);

        setId2(_id2_);

    }

    @Override
    public Object clone()
    {
        return new ACondRelatCondRelat(
            cloneNode(this._id1_),
            cloneNode(this._relatOper_),
            cloneNode(this._id2_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACondRelatCondRelat(this);
    }

    public PExpr getId1()
    {
        return this._id1_;
    }

    public void setId1(PExpr node)
    {
        if(this._id1_ != null)
        {
            this._id1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id1_ = node;
    }

    public PRelatOper getRelatOper()
    {
        return this._relatOper_;
    }

    public void setRelatOper(PRelatOper node)
    {
        if(this._relatOper_ != null)
        {
            this._relatOper_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._relatOper_ = node;
    }

    public PExpr getId2()
    {
        return this._id2_;
    }

    public void setId2(PExpr node)
    {
        if(this._id2_ != null)
        {
            this._id2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id2_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._id1_)
            + toString(this._relatOper_)
            + toString(this._id2_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._id1_ == child)
        {
            this._id1_ = null;
            return;
        }

        if(this._relatOper_ == child)
        {
            this._relatOper_ = null;
            return;
        }

        if(this._id2_ == child)
        {
            this._id2_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._id1_ == oldChild)
        {
            setId1((PExpr) newChild);
            return;
        }

        if(this._relatOper_ == oldChild)
        {
            setRelatOper((PRelatOper) newChild);
            return;
        }

        if(this._id2_ == oldChild)
        {
            setId2((PExpr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
