/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import java.util.*;
import compiler.analysis.*;

@SuppressWarnings("nls")
public final class ATypeType extends PType
{
    private PDataType _dataType_;
    private final LinkedList<PTypeStruct> _typeStruct_ = new LinkedList<PTypeStruct>();

    public ATypeType()
    {
        // Constructor
    }

    public ATypeType(
        @SuppressWarnings("hiding") PDataType _dataType_,
        @SuppressWarnings("hiding") List<PTypeStruct> _typeStruct_)
    {
        // Constructor
        setDataType(_dataType_);

        setTypeStruct(_typeStruct_);

    }

    @Override
    public Object clone()
    {
        return new ATypeType(
            cloneNode(this._dataType_),
            cloneList(this._typeStruct_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATypeType(this);
    }

    public PDataType getDataType()
    {
        return this._dataType_;
    }

    public void setDataType(PDataType node)
    {
        if(this._dataType_ != null)
        {
            this._dataType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dataType_ = node;
    }

    public LinkedList<PTypeStruct> getTypeStruct()
    {
        return this._typeStruct_;
    }

    public void setTypeStruct(List<PTypeStruct> list)
    {
        this._typeStruct_.clear();
        this._typeStruct_.addAll(list);
        for(PTypeStruct e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._dataType_)
            + toString(this._typeStruct_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._dataType_ == child)
        {
            this._dataType_ = null;
            return;
        }

        if(this._typeStruct_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._dataType_ == oldChild)
        {
            setDataType((PDataType) newChild);
            return;
        }

        for(ListIterator<PTypeStruct> i = this._typeStruct_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PTypeStruct) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
