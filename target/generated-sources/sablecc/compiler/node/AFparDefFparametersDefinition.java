/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import java.util.*;
import compiler.analysis.*;

@SuppressWarnings("nls")
public final class AFparDefFparametersDefinition extends PFparametersDefinition
{
    private TReference _reference_;
    private TIdentifier _identifier_;
    private final LinkedList<PCommaIdentifier> _commaIdentifier_ = new LinkedList<PCommaIdentifier>();
    private TColon _colon_;
    private PFparType _fparType_;

    public AFparDefFparametersDefinition()
    {
        // Constructor
    }

    public AFparDefFparametersDefinition(
        @SuppressWarnings("hiding") TReference _reference_,
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") List<PCommaIdentifier> _commaIdentifier_,
        @SuppressWarnings("hiding") TColon _colon_,
        @SuppressWarnings("hiding") PFparType _fparType_)
    {
        // Constructor
        setReference(_reference_);

        setIdentifier(_identifier_);

        setCommaIdentifier(_commaIdentifier_);

        setColon(_colon_);

        setFparType(_fparType_);

    }

    @Override
    public Object clone()
    {
        return new AFparDefFparametersDefinition(
            cloneNode(this._reference_),
            cloneNode(this._identifier_),
            cloneList(this._commaIdentifier_),
            cloneNode(this._colon_),
            cloneNode(this._fparType_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFparDefFparametersDefinition(this);
    }

    public TReference getReference()
    {
        return this._reference_;
    }

    public void setReference(TReference node)
    {
        if(this._reference_ != null)
        {
            this._reference_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._reference_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public LinkedList<PCommaIdentifier> getCommaIdentifier()
    {
        return this._commaIdentifier_;
    }

    public void setCommaIdentifier(List<PCommaIdentifier> list)
    {
        this._commaIdentifier_.clear();
        this._commaIdentifier_.addAll(list);
        for(PCommaIdentifier e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TColon getColon()
    {
        return this._colon_;
    }

    public void setColon(TColon node)
    {
        if(this._colon_ != null)
        {
            this._colon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colon_ = node;
    }

    public PFparType getFparType()
    {
        return this._fparType_;
    }

    public void setFparType(PFparType node)
    {
        if(this._fparType_ != null)
        {
            this._fparType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fparType_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._reference_)
            + toString(this._identifier_)
            + toString(this._commaIdentifier_)
            + toString(this._colon_)
            + toString(this._fparType_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._reference_ == child)
        {
            this._reference_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._commaIdentifier_.remove(child))
        {
            return;
        }

        if(this._colon_ == child)
        {
            this._colon_ = null;
            return;
        }

        if(this._fparType_ == child)
        {
            this._fparType_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._reference_ == oldChild)
        {
            setReference((TReference) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        for(ListIterator<PCommaIdentifier> i = this._commaIdentifier_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PCommaIdentifier) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._colon_ == oldChild)
        {
            setColon((TColon) newChild);
            return;
        }

        if(this._fparType_ == oldChild)
        {
            setFparType((PFparType) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
