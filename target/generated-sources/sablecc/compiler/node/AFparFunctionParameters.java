/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import java.util.*;
import compiler.analysis.*;

@SuppressWarnings("nls")
public final class AFparFunctionParameters extends PFunctionParameters
{
    private PFparametersDefinition _fparametersDefinition_;
    private final LinkedList<PSemiFunctionParameters> _semiFunctionParameters_ = new LinkedList<PSemiFunctionParameters>();

    public AFparFunctionParameters()
    {
        // Constructor
    }

    public AFparFunctionParameters(
        @SuppressWarnings("hiding") PFparametersDefinition _fparametersDefinition_,
        @SuppressWarnings("hiding") List<PSemiFunctionParameters> _semiFunctionParameters_)
    {
        // Constructor
        setFparametersDefinition(_fparametersDefinition_);

        setSemiFunctionParameters(_semiFunctionParameters_);

    }

    @Override
    public Object clone()
    {
        return new AFparFunctionParameters(
            cloneNode(this._fparametersDefinition_),
            cloneList(this._semiFunctionParameters_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFparFunctionParameters(this);
    }

    public PFparametersDefinition getFparametersDefinition()
    {
        return this._fparametersDefinition_;
    }

    public void setFparametersDefinition(PFparametersDefinition node)
    {
        if(this._fparametersDefinition_ != null)
        {
            this._fparametersDefinition_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fparametersDefinition_ = node;
    }

    public LinkedList<PSemiFunctionParameters> getSemiFunctionParameters()
    {
        return this._semiFunctionParameters_;
    }

    public void setSemiFunctionParameters(List<PSemiFunctionParameters> list)
    {
        this._semiFunctionParameters_.clear();
        this._semiFunctionParameters_.addAll(list);
        for(PSemiFunctionParameters e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._fparametersDefinition_)
            + toString(this._semiFunctionParameters_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._fparametersDefinition_ == child)
        {
            this._fparametersDefinition_ = null;
            return;
        }

        if(this._semiFunctionParameters_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._fparametersDefinition_ == oldChild)
        {
            setFparametersDefinition((PFparametersDefinition) newChild);
            return;
        }

        for(ListIterator<PSemiFunctionParameters> i = this._semiFunctionParameters_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PSemiFunctionParameters) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
