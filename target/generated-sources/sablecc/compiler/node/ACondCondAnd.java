/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import compiler.analysis.*;

@SuppressWarnings("nls")
public final class ACondCondAnd extends PCondAnd
{
    private PCondNot _condNot_;

    public ACondCondAnd()
    {
        // Constructor
    }

    public ACondCondAnd(
        @SuppressWarnings("hiding") PCondNot _condNot_)
    {
        // Constructor
        setCondNot(_condNot_);

    }

    @Override
    public Object clone()
    {
        return new ACondCondAnd(
            cloneNode(this._condNot_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACondCondAnd(this);
    }

    public PCondNot getCondNot()
    {
        return this._condNot_;
    }

    public void setCondNot(PCondNot node)
    {
        if(this._condNot_ != null)
        {
            this._condNot_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._condNot_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._condNot_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._condNot_ == child)
        {
            this._condNot_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._condNot_ == oldChild)
        {
            setCondNot((PCondNot) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
