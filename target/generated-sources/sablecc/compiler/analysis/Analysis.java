/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.analysis;

import compiler.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseACommd(ACommd node);
    void caseABlockBlock(ABlockBlock node);
    void caseAMatchedStmt(AMatchedStmt node);
    void caseAUnmatchedStmt(AUnmatchedStmt node);
    void caseASemiMatched(ASemiMatched node);
    void caseAAssignmentMatched(AAssignmentMatched node);
    void caseABlockMatched(ABlockMatched node);
    void caseAFuncCallMatched(AFuncCallMatched node);
    void caseAIfElseMatched(AIfElseMatched node);
    void caseAReturnMatched(AReturnMatched node);
    void caseAIfUnmatched(AIfUnmatched node);
    void caseAIfElseUnmatched(AIfElseUnmatched node);
    void caseAFactorExpr(AFactorExpr node);
    void caseAPlusExpr(APlusExpr node);
    void caseAMinusExpr(AMinusExpr node);
    void caseAExprParFactor(AExprParFactor node);
    void caseAMultFactor(AMultFactor node);
    void caseADivFactor(ADivFactor node);
    void caseAModFactor(AModFactor node);
    void caseATermExprPar(ATermExprPar node);
    void caseAParExprPar(AParExprPar node);
    void caseATermTermSign(ATermTermSign node);
    void caseASignPlusTermSign(ASignPlusTermSign node);
    void caseASignMinusTermSign(ASignMinusTermSign node);
    void caseAIntConstTerm(AIntConstTerm node);
    void caseACharConstTerm(ACharConstTerm node);
    void caseALValueTerm(ALValueTerm node);
    void caseAFuncCallTerm(AFuncCallTerm node);
    void caseACondCond(ACondCond node);
    void caseACondOrCond(ACondOrCond node);
    void caseACondCondAnd(ACondCondAnd node);
    void caseACondAndCondAnd(ACondAndCondAnd node);
    void caseACondCondNot(ACondCondNot node);
    void caseACondNotCondNot(ACondNotCondNot node);
    void caseAExprCondPar(AExprCondPar node);
    void caseACondCondPar(ACondCondPar node);
    void caseACondRelatCondRelat(ACondRelatCondRelat node);
    void caseAEqualRelatOper(AEqualRelatOper node);
    void caseANEqualRelatOper(ANEqualRelatOper node);
    void caseALessRelatOper(ALessRelatOper node);
    void caseALessEqualRelatOper(ALessEqualRelatOper node);
    void caseAGreaterRelatOper(AGreaterRelatOper node);
    void caseAGreaterEqualRelatOper(AGreaterEqualRelatOper node);
    void caseAFuncCallFuncCall(AFuncCallFuncCall node);
    void caseAExprCommaExprFuncCallExpr(AExprCommaExprFuncCallExpr node);
    void caseACommaExprCommaExpr(ACommaExprCommaExpr node);
    void caseAIdLValue(AIdLValue node);
    void caseAStringLiteralLValue(AStringLiteralLValue node);
    void caseALValueLValue(ALValueLValue node);

    void caseTComment(TComment node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTDivision(TDivision node);
    void caseTDiv(TDiv node);
    void caseTMod(TMod node);
    void caseTAssign(TAssign node);
    void caseTEqual(TEqual node);
    void caseTNEqual(TNEqual node);
    void caseTLess(TLess node);
    void caseTLessEqual(TLessEqual node);
    void caseTGreater(TGreater node);
    void caseTGreaterEqual(TGreaterEqual node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBrc(TLBrc node);
    void caseTRBrc(TRBrc node);
    void caseTLBkt(TLBkt node);
    void caseTRBkt(TRBkt node);
    void caseTSemi(TSemi node);
    void caseTComma(TComma node);
    void caseTColon(TColon node);
    void caseTNumber(TNumber node);
    void caseTConstChar(TConstChar node);
    void caseTConstString(TConstString node);
    void caseTChar(TChar node);
    void caseTInt(TInt node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTNot(TNot node);
    void caseTIf(TIf node);
    void caseTThen(TThen node);
    void caseTElse(TElse node);
    void caseTWhile(TWhile node);
    void caseTDo(TDo node);
    void caseTNothing(TNothing node);
    void caseTFunction(TFunction node);
    void caseTReference(TReference node);
    void caseTReturn(TReturn node);
    void caseTVariable(TVariable node);
    void caseTIdentifier(TIdentifier node);
    void caseTWhiteSpaces(TWhiteSpaces node);
    void caseTEscSequence(TEscSequence node);
    void caseEOF(EOF node);
}
