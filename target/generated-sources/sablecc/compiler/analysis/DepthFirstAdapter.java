/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.analysis;

import java.util.*;
import compiler.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        {
            List<PCommd> copy = new ArrayList<PCommd>(node.getCommd());
            for(PCommd e : copy)
            {
                e.apply(this);
            }
        }
        outAProgram(node);
    }

    public void inACommd(ACommd node)
    {
        defaultIn(node);
    }

    public void outACommd(ACommd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommd(ACommd node)
    {
        inACommd(node);
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        outACommd(node);
    }

    public void inABlockBlock(ABlockBlock node)
    {
        defaultIn(node);
    }

    public void outABlockBlock(ABlockBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockBlock(ABlockBlock node)
    {
        inABlockBlock(node);
        if(node.getLBrc() != null)
        {
            node.getLBrc().apply(this);
        }
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getStmt());
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRBrc() != null)
        {
            node.getRBrc().apply(this);
        }
        outABlockBlock(node);
    }

    public void inAMatchedStmt(AMatchedStmt node)
    {
        defaultIn(node);
    }

    public void outAMatchedStmt(AMatchedStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMatchedStmt(AMatchedStmt node)
    {
        inAMatchedStmt(node);
        if(node.getMatched() != null)
        {
            node.getMatched().apply(this);
        }
        outAMatchedStmt(node);
    }

    public void inAUnmatchedStmt(AUnmatchedStmt node)
    {
        defaultIn(node);
    }

    public void outAUnmatchedStmt(AUnmatchedStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnmatchedStmt(AUnmatchedStmt node)
    {
        inAUnmatchedStmt(node);
        if(node.getUnmatched() != null)
        {
            node.getUnmatched().apply(this);
        }
        outAUnmatchedStmt(node);
    }

    public void inASemiMatched(ASemiMatched node)
    {
        defaultIn(node);
    }

    public void outASemiMatched(ASemiMatched node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemiMatched(ASemiMatched node)
    {
        inASemiMatched(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outASemiMatched(node);
    }

    public void inAAssignmentMatched(AAssignmentMatched node)
    {
        defaultIn(node);
    }

    public void outAAssignmentMatched(AAssignmentMatched node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmentMatched(AAssignmentMatched node)
    {
        inAAssignmentMatched(node);
        if(node.getLValue() != null)
        {
            node.getLValue().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAAssignmentMatched(node);
    }

    public void inABlockMatched(ABlockMatched node)
    {
        defaultIn(node);
    }

    public void outABlockMatched(ABlockMatched node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockMatched(ABlockMatched node)
    {
        inABlockMatched(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outABlockMatched(node);
    }

    public void inAFuncCallMatched(AFuncCallMatched node)
    {
        defaultIn(node);
    }

    public void outAFuncCallMatched(AFuncCallMatched node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncCallMatched(AFuncCallMatched node)
    {
        inAFuncCallMatched(node);
        if(node.getFuncCall() != null)
        {
            node.getFuncCall().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAFuncCallMatched(node);
    }

    public void inAIfElseMatched(AIfElseMatched node)
    {
        defaultIn(node);
    }

    public void outAIfElseMatched(AIfElseMatched node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElseMatched(AIfElseMatched node)
    {
        inAIfElseMatched(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getId1() != null)
        {
            node.getId1().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getId2() != null)
        {
            node.getId2().apply(this);
        }
        outAIfElseMatched(node);
    }

    public void inAReturnMatched(AReturnMatched node)
    {
        defaultIn(node);
    }

    public void outAReturnMatched(AReturnMatched node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnMatched(AReturnMatched node)
    {
        inAReturnMatched(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAReturnMatched(node);
    }

    public void inAIfUnmatched(AIfUnmatched node)
    {
        defaultIn(node);
    }

    public void outAIfUnmatched(AIfUnmatched node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfUnmatched(AIfUnmatched node)
    {
        inAIfUnmatched(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        outAIfUnmatched(node);
    }

    public void inAIfElseUnmatched(AIfElseUnmatched node)
    {
        defaultIn(node);
    }

    public void outAIfElseUnmatched(AIfElseUnmatched node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElseUnmatched(AIfElseUnmatched node)
    {
        inAIfElseUnmatched(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getMatched() != null)
        {
            node.getMatched().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getUnmatched() != null)
        {
            node.getUnmatched().apply(this);
        }
        outAIfElseUnmatched(node);
    }

    public void inAFactorExpr(AFactorExpr node)
    {
        defaultIn(node);
    }

    public void outAFactorExpr(AFactorExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactorExpr(AFactorExpr node)
    {
        inAFactorExpr(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAFactorExpr(node);
    }

    public void inAPlusExpr(APlusExpr node)
    {
        defaultIn(node);
    }

    public void outAPlusExpr(APlusExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusExpr(APlusExpr node)
    {
        inAPlusExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAPlusExpr(node);
    }

    public void inAMinusExpr(AMinusExpr node)
    {
        defaultIn(node);
    }

    public void outAMinusExpr(AMinusExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusExpr(AMinusExpr node)
    {
        inAMinusExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAMinusExpr(node);
    }

    public void inAExprParFactor(AExprParFactor node)
    {
        defaultIn(node);
    }

    public void outAExprParFactor(AExprParFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprParFactor(AExprParFactor node)
    {
        inAExprParFactor(node);
        if(node.getExprPar() != null)
        {
            node.getExprPar().apply(this);
        }
        outAExprParFactor(node);
    }

    public void inAMultFactor(AMultFactor node)
    {
        defaultIn(node);
    }

    public void outAMultFactor(AMultFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultFactor(AMultFactor node)
    {
        inAMultFactor(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getExprPar() != null)
        {
            node.getExprPar().apply(this);
        }
        outAMultFactor(node);
    }

    public void inADivFactor(ADivFactor node)
    {
        defaultIn(node);
    }

    public void outADivFactor(ADivFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivFactor(ADivFactor node)
    {
        inADivFactor(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getExprPar() != null)
        {
            node.getExprPar().apply(this);
        }
        outADivFactor(node);
    }

    public void inAModFactor(AModFactor node)
    {
        defaultIn(node);
    }

    public void outAModFactor(AModFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModFactor(AModFactor node)
    {
        inAModFactor(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getExprPar() != null)
        {
            node.getExprPar().apply(this);
        }
        outAModFactor(node);
    }

    public void inATermExprPar(ATermExprPar node)
    {
        defaultIn(node);
    }

    public void outATermExprPar(ATermExprPar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermExprPar(ATermExprPar node)
    {
        inATermExprPar(node);
        if(node.getTermSign() != null)
        {
            node.getTermSign().apply(this);
        }
        outATermExprPar(node);
    }

    public void inAParExprPar(AParExprPar node)
    {
        defaultIn(node);
    }

    public void outAParExprPar(AParExprPar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParExprPar(AParExprPar node)
    {
        inAParExprPar(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAParExprPar(node);
    }

    public void inATermTermSign(ATermTermSign node)
    {
        defaultIn(node);
    }

    public void outATermTermSign(ATermTermSign node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermTermSign(ATermTermSign node)
    {
        inATermTermSign(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermTermSign(node);
    }

    public void inASignPlusTermSign(ASignPlusTermSign node)
    {
        defaultIn(node);
    }

    public void outASignPlusTermSign(ASignPlusTermSign node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASignPlusTermSign(ASignPlusTermSign node)
    {
        inASignPlusTermSign(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outASignPlusTermSign(node);
    }

    public void inASignMinusTermSign(ASignMinusTermSign node)
    {
        defaultIn(node);
    }

    public void outASignMinusTermSign(ASignMinusTermSign node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASignMinusTermSign(ASignMinusTermSign node)
    {
        inASignMinusTermSign(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outASignMinusTermSign(node);
    }

    public void inAIntConstTerm(AIntConstTerm node)
    {
        defaultIn(node);
    }

    public void outAIntConstTerm(AIntConstTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntConstTerm(AIntConstTerm node)
    {
        inAIntConstTerm(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outAIntConstTerm(node);
    }

    public void inACharConstTerm(ACharConstTerm node)
    {
        defaultIn(node);
    }

    public void outACharConstTerm(ACharConstTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharConstTerm(ACharConstTerm node)
    {
        inACharConstTerm(node);
        if(node.getConstChar() != null)
        {
            node.getConstChar().apply(this);
        }
        outACharConstTerm(node);
    }

    public void inALValueTerm(ALValueTerm node)
    {
        defaultIn(node);
    }

    public void outALValueTerm(ALValueTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALValueTerm(ALValueTerm node)
    {
        inALValueTerm(node);
        if(node.getLValue() != null)
        {
            node.getLValue().apply(this);
        }
        outALValueTerm(node);
    }

    public void inAFuncCallTerm(AFuncCallTerm node)
    {
        defaultIn(node);
    }

    public void outAFuncCallTerm(AFuncCallTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncCallTerm(AFuncCallTerm node)
    {
        inAFuncCallTerm(node);
        if(node.getFuncCall() != null)
        {
            node.getFuncCall().apply(this);
        }
        outAFuncCallTerm(node);
    }

    public void inACondCond(ACondCond node)
    {
        defaultIn(node);
    }

    public void outACondCond(ACondCond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondCond(ACondCond node)
    {
        inACondCond(node);
        if(node.getCondAnd() != null)
        {
            node.getCondAnd().apply(this);
        }
        outACondCond(node);
    }

    public void inACondOrCond(ACondOrCond node)
    {
        defaultIn(node);
    }

    public void outACondOrCond(ACondOrCond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondOrCond(ACondOrCond node)
    {
        inACondOrCond(node);
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getCondAnd() != null)
        {
            node.getCondAnd().apply(this);
        }
        outACondOrCond(node);
    }

    public void inACondCondAnd(ACondCondAnd node)
    {
        defaultIn(node);
    }

    public void outACondCondAnd(ACondCondAnd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondCondAnd(ACondCondAnd node)
    {
        inACondCondAnd(node);
        if(node.getCondNot() != null)
        {
            node.getCondNot().apply(this);
        }
        outACondCondAnd(node);
    }

    public void inACondAndCondAnd(ACondAndCondAnd node)
    {
        defaultIn(node);
    }

    public void outACondAndCondAnd(ACondAndCondAnd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondAndCondAnd(ACondAndCondAnd node)
    {
        inACondAndCondAnd(node);
        if(node.getCondAnd() != null)
        {
            node.getCondAnd().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getCondNot() != null)
        {
            node.getCondNot().apply(this);
        }
        outACondAndCondAnd(node);
    }

    public void inACondCondNot(ACondCondNot node)
    {
        defaultIn(node);
    }

    public void outACondCondNot(ACondCondNot node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondCondNot(ACondCondNot node)
    {
        inACondCondNot(node);
        if(node.getCondPar() != null)
        {
            node.getCondPar().apply(this);
        }
        outACondCondNot(node);
    }

    public void inACondNotCondNot(ACondNotCondNot node)
    {
        defaultIn(node);
    }

    public void outACondNotCondNot(ACondNotCondNot node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondNotCondNot(ACondNotCondNot node)
    {
        inACondNotCondNot(node);
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getCondNot() != null)
        {
            node.getCondNot().apply(this);
        }
        outACondNotCondNot(node);
    }

    public void inAExprCondPar(AExprCondPar node)
    {
        defaultIn(node);
    }

    public void outAExprCondPar(AExprCondPar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprCondPar(AExprCondPar node)
    {
        inAExprCondPar(node);
        if(node.getCondRelat() != null)
        {
            node.getCondRelat().apply(this);
        }
        outAExprCondPar(node);
    }

    public void inACondCondPar(ACondCondPar node)
    {
        defaultIn(node);
    }

    public void outACondCondPar(ACondCondPar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondCondPar(ACondCondPar node)
    {
        inACondCondPar(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outACondCondPar(node);
    }

    public void inACondRelatCondRelat(ACondRelatCondRelat node)
    {
        defaultIn(node);
    }

    public void outACondRelatCondRelat(ACondRelatCondRelat node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondRelatCondRelat(ACondRelatCondRelat node)
    {
        inACondRelatCondRelat(node);
        if(node.getId1() != null)
        {
            node.getId1().apply(this);
        }
        if(node.getRelatOper() != null)
        {
            node.getRelatOper().apply(this);
        }
        if(node.getId2() != null)
        {
            node.getId2().apply(this);
        }
        outACondRelatCondRelat(node);
    }

    public void inAEqualRelatOper(AEqualRelatOper node)
    {
        defaultIn(node);
    }

    public void outAEqualRelatOper(AEqualRelatOper node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualRelatOper(AEqualRelatOper node)
    {
        inAEqualRelatOper(node);
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        outAEqualRelatOper(node);
    }

    public void inANEqualRelatOper(ANEqualRelatOper node)
    {
        defaultIn(node);
    }

    public void outANEqualRelatOper(ANEqualRelatOper node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANEqualRelatOper(ANEqualRelatOper node)
    {
        inANEqualRelatOper(node);
        if(node.getNEqual() != null)
        {
            node.getNEqual().apply(this);
        }
        outANEqualRelatOper(node);
    }

    public void inALessRelatOper(ALessRelatOper node)
    {
        defaultIn(node);
    }

    public void outALessRelatOper(ALessRelatOper node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessRelatOper(ALessRelatOper node)
    {
        inALessRelatOper(node);
        if(node.getLess() != null)
        {
            node.getLess().apply(this);
        }
        outALessRelatOper(node);
    }

    public void inALessEqualRelatOper(ALessEqualRelatOper node)
    {
        defaultIn(node);
    }

    public void outALessEqualRelatOper(ALessEqualRelatOper node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessEqualRelatOper(ALessEqualRelatOper node)
    {
        inALessEqualRelatOper(node);
        if(node.getLessEqual() != null)
        {
            node.getLessEqual().apply(this);
        }
        outALessEqualRelatOper(node);
    }

    public void inAGreaterRelatOper(AGreaterRelatOper node)
    {
        defaultIn(node);
    }

    public void outAGreaterRelatOper(AGreaterRelatOper node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterRelatOper(AGreaterRelatOper node)
    {
        inAGreaterRelatOper(node);
        if(node.getGreater() != null)
        {
            node.getGreater().apply(this);
        }
        outAGreaterRelatOper(node);
    }

    public void inAGreaterEqualRelatOper(AGreaterEqualRelatOper node)
    {
        defaultIn(node);
    }

    public void outAGreaterEqualRelatOper(AGreaterEqualRelatOper node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterEqualRelatOper(AGreaterEqualRelatOper node)
    {
        inAGreaterEqualRelatOper(node);
        if(node.getGreaterEqual() != null)
        {
            node.getGreaterEqual().apply(this);
        }
        outAGreaterEqualRelatOper(node);
    }

    public void inAFuncCallFuncCall(AFuncCallFuncCall node)
    {
        defaultIn(node);
    }

    public void outAFuncCallFuncCall(AFuncCallFuncCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncCallFuncCall(AFuncCallFuncCall node)
    {
        inAFuncCallFuncCall(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getFuncCallExpr() != null)
        {
            node.getFuncCallExpr().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAFuncCallFuncCall(node);
    }

    public void inAExprCommaExprFuncCallExpr(AExprCommaExprFuncCallExpr node)
    {
        defaultIn(node);
    }

    public void outAExprCommaExprFuncCallExpr(AExprCommaExprFuncCallExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprCommaExprFuncCallExpr(AExprCommaExprFuncCallExpr node)
    {
        inAExprCommaExprFuncCallExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        {
            List<PCommaExpr> copy = new ArrayList<PCommaExpr>(node.getCommaExpr());
            for(PCommaExpr e : copy)
            {
                e.apply(this);
            }
        }
        outAExprCommaExprFuncCallExpr(node);
    }

    public void inACommaExprCommaExpr(ACommaExprCommaExpr node)
    {
        defaultIn(node);
    }

    public void outACommaExprCommaExpr(ACommaExprCommaExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommaExprCommaExpr(ACommaExprCommaExpr node)
    {
        inACommaExprCommaExpr(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outACommaExprCommaExpr(node);
    }

    public void inAIdLValue(AIdLValue node)
    {
        defaultIn(node);
    }

    public void outAIdLValue(AIdLValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdLValue(AIdLValue node)
    {
        inAIdLValue(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdLValue(node);
    }

    public void inAStringLiteralLValue(AStringLiteralLValue node)
    {
        defaultIn(node);
    }

    public void outAStringLiteralLValue(AStringLiteralLValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringLiteralLValue(AStringLiteralLValue node)
    {
        inAStringLiteralLValue(node);
        if(node.getConstString() != null)
        {
            node.getConstString().apply(this);
        }
        outAStringLiteralLValue(node);
    }

    public void inALValueLValue(ALValueLValue node)
    {
        defaultIn(node);
    }

    public void outALValueLValue(ALValueLValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALValueLValue(ALValueLValue node)
    {
        inALValueLValue(node);
        if(node.getLValue() != null)
        {
            node.getLValue().apply(this);
        }
        if(node.getLBkt() != null)
        {
            node.getLBkt().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRBkt() != null)
        {
            node.getRBkt().apply(this);
        }
        outALValueLValue(node);
    }
}
