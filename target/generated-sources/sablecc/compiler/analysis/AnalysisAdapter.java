/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.analysis;

import java.util.*;
import compiler.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseATermExpr(ATermExpr node)
    {
        defaultCase(node);
    }

    public void caseAAddExpr(AAddExpr node)
    {
        defaultCase(node);
    }

    public void caseASubExpr(ASubExpr node)
    {
        defaultCase(node);
    }

    public void caseAFactorTerm(AFactorTerm node)
    {
        defaultCase(node);
    }

    public void caseAMultTerm(AMultTerm node)
    {
        defaultCase(node);
    }

    public void caseADivisionTerm(ADivisionTerm node)
    {
        defaultCase(node);
    }

    public void caseADivTerm(ADivTerm node)
    {
        defaultCase(node);
    }

    public void caseAModTerm(AModTerm node)
    {
        defaultCase(node);
    }

    public void caseANumberFactor(ANumberFactor node)
    {
        defaultCase(node);
    }

    public void caseAParensFactor(AParensFactor node)
    {
        defaultCase(node);
    }

    public void caseAProgProgram(AProgProgram node)
    {
        defaultCase(node);
    }

    public void caseAFuncDefFuncDef(AFuncDefFuncDef node)
    {
        defaultCase(node);
    }

    public void caseAHeaderHeader(AHeaderHeader node)
    {
        defaultCase(node);
    }

    public void caseAFparDefinition(AFparDefinition node)
    {
        defaultCase(node);
    }

    public void caseASemiFparDef(ASemiFparDef node)
    {
        defaultCase(node);
    }

    public void caseAFparDefFparDef(AFparDefFparDef node)
    {
        defaultCase(node);
    }

    public void caseACommaIdentifier(ACommaIdentifier node)
    {
        defaultCase(node);
    }

    public void caseAIntTypeDataType(AIntTypeDataType node)
    {
        defaultCase(node);
    }

    public void caseACharTypeDataType(ACharTypeDataType node)
    {
        defaultCase(node);
    }

    public void caseATypeType(ATypeType node)
    {
        defaultCase(node);
    }

    public void caseATypeStruct(ATypeStruct node)
    {
        defaultCase(node);
    }

    public void caseADataRetType(ADataRetType node)
    {
        defaultCase(node);
    }

    public void caseANothRetType(ANothRetType node)
    {
        defaultCase(node);
    }

    public void caseAFparFparType(AFparFparType node)
    {
        defaultCase(node);
    }

    public void caseALrbkt(ALrbkt node)
    {
        defaultCase(node);
    }

    public void caseAFuncDefLocalDef(AFuncDefLocalDef node)
    {
        defaultCase(node);
    }

    public void caseAFuncDeclLocalDef(AFuncDeclLocalDef node)
    {
        defaultCase(node);
    }

    public void caseAVarDefLocalDef(AVarDefLocalDef node)
    {
        defaultCase(node);
    }

    public void caseAVarVarDef(AVarVarDef node)
    {
        defaultCase(node);
    }

    public void caseAFuncDecl(AFuncDecl node)
    {
        defaultCase(node);
    }

    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    public void caseTDivision(TDivision node)
    {
        defaultCase(node);
    }

    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    public void caseTAssign(TAssign node)
    {
        defaultCase(node);
    }

    public void caseTEqual(TEqual node)
    {
        defaultCase(node);
    }

    public void caseTNEqual(TNEqual node)
    {
        defaultCase(node);
    }

    public void caseTLess(TLess node)
    {
        defaultCase(node);
    }

    public void caseTLessEqual(TLessEqual node)
    {
        defaultCase(node);
    }

    public void caseTGreater(TGreater node)
    {
        defaultCase(node);
    }

    public void caseTGreaterEqual(TGreaterEqual node)
    {
        defaultCase(node);
    }

    public void caseTHash(THash node)
    {
        defaultCase(node);
    }

    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    public void caseTLBrc(TLBrc node)
    {
        defaultCase(node);
    }

    public void caseTRBrc(TRBrc node)
    {
        defaultCase(node);
    }

    public void caseTLBkt(TLBkt node)
    {
        defaultCase(node);
    }

    public void caseTRBkt(TRBkt node)
    {
        defaultCase(node);
    }

    public void caseTSemi(TSemi node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    public void caseTIntConst(TIntConst node)
    {
        defaultCase(node);
    }

    public void caseTConstString(TConstString node)
    {
        defaultCase(node);
    }

    public void caseTChar(TChar node)
    {
        defaultCase(node);
    }

    public void caseTInt(TInt node)
    {
        defaultCase(node);
    }

    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    public void caseTThen(TThen node)
    {
        defaultCase(node);
    }

    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    public void caseTDo(TDo node)
    {
        defaultCase(node);
    }

    public void caseTNothing(TNothing node)
    {
        defaultCase(node);
    }

    public void caseTFunction(TFunction node)
    {
        defaultCase(node);
    }

    public void caseTReference(TReference node)
    {
        defaultCase(node);
    }

    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    public void caseTVariable(TVariable node)
    {
        defaultCase(node);
    }

    public void caseTBlock(TBlock node)
    {
        defaultCase(node);
    }

    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    public void caseTWhiteSpaces(TWhiteSpaces node)
    {
        defaultCase(node);
    }

    public void caseTEscSequence(TEscSequence node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
