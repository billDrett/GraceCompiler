/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.analysis;

import java.util.*;
import compiler.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAProgram(AProgram node)
    {
        defaultCase(node);
    }

    public void caseAFunDefinition(AFunDefinition node)
    {
        defaultCase(node);
    }

    public void caseASemiStatement(ASemiStatement node)
    {
        defaultCase(node);
    }

    public void caseAAssignStatement(AAssignStatement node)
    {
        defaultCase(node);
    }

    public void caseABlockStatement(ABlockStatement node)
    {
        defaultCase(node);
    }

    public void caseAFuncCallStatement(AFuncCallStatement node)
    {
        defaultCase(node);
    }

    public void caseAIfWithoutElseStatement(AIfWithoutElseStatement node)
    {
        defaultCase(node);
    }

    public void caseAIfWithElseStatement(AIfWithElseStatement node)
    {
        defaultCase(node);
    }

    public void caseAWhileStatement(AWhileStatement node)
    {
        defaultCase(node);
    }

    public void caseAReturnStatement(AReturnStatement node)
    {
        defaultCase(node);
    }

    public void caseAFunDefLocalDef(AFunDefLocalDef node)
    {
        defaultCase(node);
    }

    public void caseAFunDeclLocalDef(AFunDeclLocalDef node)
    {
        defaultCase(node);
    }

    public void caseAVarDefLocalDef(AVarDefLocalDef node)
    {
        defaultCase(node);
    }

    public void caseAOrCondition(AOrCondition node)
    {
        defaultCase(node);
    }

    public void caseAAndCondition(AAndCondition node)
    {
        defaultCase(node);
    }

    public void caseANotCondition(ANotCondition node)
    {
        defaultCase(node);
    }

    public void caseAParCondition(AParCondition node)
    {
        defaultCase(node);
    }

    public void caseARelatCondition(ARelatCondition node)
    {
        defaultCase(node);
    }

    public void caseAEqualRelationOper(AEqualRelationOper node)
    {
        defaultCase(node);
    }

    public void caseANEqualRelationOper(ANEqualRelationOper node)
    {
        defaultCase(node);
    }

    public void caseALessRelationOper(ALessRelationOper node)
    {
        defaultCase(node);
    }

    public void caseALessEqualRelationOper(ALessEqualRelationOper node)
    {
        defaultCase(node);
    }

    public void caseAGreaterRelationOper(AGreaterRelationOper node)
    {
        defaultCase(node);
    }

    public void caseAGreaterEqualRelationOper(AGreaterEqualRelationOper node)
    {
        defaultCase(node);
    }

    public void caseAExprList(AExprList node)
    {
        defaultCase(node);
    }

    public void caseAPlusExpression(APlusExpression node)
    {
        defaultCase(node);
    }

    public void caseAMinusExpression(AMinusExpression node)
    {
        defaultCase(node);
    }

    public void caseAMultExpression(AMultExpression node)
    {
        defaultCase(node);
    }

    public void caseADivExpression(ADivExpression node)
    {
        defaultCase(node);
    }

    public void caseAModExpression(AModExpression node)
    {
        defaultCase(node);
    }

    public void caseAPosExpression(APosExpression node)
    {
        defaultCase(node);
    }

    public void caseANegExpression(ANegExpression node)
    {
        defaultCase(node);
    }

    public void caseAIntExpression(AIntExpression node)
    {
        defaultCase(node);
    }

    public void caseACharExpression(ACharExpression node)
    {
        defaultCase(node);
    }

    public void caseAValExpression(AValExpression node)
    {
        defaultCase(node);
    }

    public void caseAFunExpression(AFunExpression node)
    {
        defaultCase(node);
    }

    public void caseAHeader(AHeader node)
    {
        defaultCase(node);
    }

    public void caseAFparDefinition(AFparDefinition node)
    {
        defaultCase(node);
    }

    public void caseAVarDefinition(AVarDefinition node)
    {
        defaultCase(node);
    }

    public void caseAVarIdentifier(AVarIdentifier node)
    {
        defaultCase(node);
    }

    public void caseAFparType(AFparType node)
    {
        defaultCase(node);
    }

    public void caseAVarType(AVarType node)
    {
        defaultCase(node);
    }

    public void caseAIntGeneralType(AIntGeneralType node)
    {
        defaultCase(node);
    }

    public void caseACharGeneralType(ACharGeneralType node)
    {
        defaultCase(node);
    }

    public void caseANothGeneralType(ANothGeneralType node)
    {
        defaultCase(node);
    }

    public void caseAConstIntBr(AConstIntBr node)
    {
        defaultCase(node);
    }

    public void caseAEmptyBr(AEmptyBr node)
    {
        defaultCase(node);
    }

    public void caseAFunctionCall(AFunctionCall node)
    {
        defaultCase(node);
    }

    public void caseAIdLvalue(AIdLvalue node)
    {
        defaultCase(node);
    }

    public void caseAStrLvalue(AStrLvalue node)
    {
        defaultCase(node);
    }

    public void caseAValLvalue(AValLvalue node)
    {
        defaultCase(node);
    }

    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    public void caseTDivision(TDivision node)
    {
        defaultCase(node);
    }

    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    public void caseTAssign(TAssign node)
    {
        defaultCase(node);
    }

    public void caseTEqual(TEqual node)
    {
        defaultCase(node);
    }

    public void caseTNEqual(TNEqual node)
    {
        defaultCase(node);
    }

    public void caseTLess(TLess node)
    {
        defaultCase(node);
    }

    public void caseTLessEqual(TLessEqual node)
    {
        defaultCase(node);
    }

    public void caseTGreater(TGreater node)
    {
        defaultCase(node);
    }

    public void caseTGreaterEqual(TGreaterEqual node)
    {
        defaultCase(node);
    }

    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    public void caseTLBrc(TLBrc node)
    {
        defaultCase(node);
    }

    public void caseTRBrc(TRBrc node)
    {
        defaultCase(node);
    }

    public void caseTLBkt(TLBkt node)
    {
        defaultCase(node);
    }

    public void caseTRBkt(TRBkt node)
    {
        defaultCase(node);
    }

    public void caseTSemi(TSemi node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    public void caseTErroneousNumber(TErroneousNumber node)
    {
        defaultCase(node);
    }

    public void caseTConstChar(TConstChar node)
    {
        defaultCase(node);
    }

    public void caseTConstString(TConstString node)
    {
        defaultCase(node);
    }

    public void caseTChar(TChar node)
    {
        defaultCase(node);
    }

    public void caseTInt(TInt node)
    {
        defaultCase(node);
    }

    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    public void caseTThen(TThen node)
    {
        defaultCase(node);
    }

    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    public void caseTDo(TDo node)
    {
        defaultCase(node);
    }

    public void caseTNothing(TNothing node)
    {
        defaultCase(node);
    }

    public void caseTFunction(TFunction node)
    {
        defaultCase(node);
    }

    public void caseTReference(TReference node)
    {
        defaultCase(node);
    }

    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    public void caseTVariable(TVariable node)
    {
        defaultCase(node);
    }

    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    public void caseTWhiteSpaces(TWhiteSpaces node)
    {
        defaultCase(node);
    }

    public void caseTEscSequence(TEscSequence node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
