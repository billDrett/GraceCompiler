/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.parser;

import compiler.lexer.*;
import compiler.node.*;
import compiler.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AProgram */
		    {
			ArrayList list = new0();
			push(goTo(0), list);
		    }
		    break;
                    case 1: /* reduce AAfunctiondefinition1FunctionDefinition */
		    {
			ArrayList list = new1();
			push(goTo(1), list);
		    }
		    break;
                    case 2: /* reduce AAfunctiondefinition2FunctionDefinition */
		    {
			ArrayList list = new2();
			push(goTo(1), list);
		    }
		    break;
                    case 3: /* reduce AAblock1Block */
		    {
			ArrayList list = new3();
			push(goTo(2), list);
		    }
		    break;
                    case 4: /* reduce AAblock2Block */
		    {
			ArrayList list = new4();
			push(goTo(2), list);
		    }
		    break;
                    case 5: /* reduce ASemiStmt */
		    {
			ArrayList list = new5();
			push(goTo(3), list);
		    }
		    break;
                    case 6: /* reduce AAssignmentStmt */
		    {
			ArrayList list = new6();
			push(goTo(3), list);
		    }
		    break;
                    case 7: /* reduce ABlockStmt */
		    {
			ArrayList list = new7();
			push(goTo(3), list);
		    }
		    break;
                    case 8: /* reduce AFuncCallStmt */
		    {
			ArrayList list = new8();
			push(goTo(3), list);
		    }
		    break;
                    case 9: /* reduce AIfWithoutElseStmt */
		    {
			ArrayList list = new9();
			push(goTo(3), list);
		    }
		    break;
                    case 10: /* reduce AIfWithElseStmt */
		    {
			ArrayList list = new10();
			push(goTo(3), list);
		    }
		    break;
                    case 11: /* reduce AWhileStmt */
		    {
			ArrayList list = new11();
			push(goTo(3), list);
		    }
		    break;
                    case 12: /* reduce AAreturnstmt1Stmt */
		    {
			ArrayList list = new12();
			push(goTo(3), list);
		    }
		    break;
                    case 13: /* reduce AAreturnstmt2Stmt */
		    {
			ArrayList list = new13();
			push(goTo(3), list);
		    }
		    break;
                    case 14: /* reduce ASemiStmtWithElse */
		    {
			ArrayList list = new14();
			push(goTo(4), list);
		    }
		    break;
                    case 15: /* reduce AAssignmentStmtWithElse */
		    {
			ArrayList list = new15();
			push(goTo(4), list);
		    }
		    break;
                    case 16: /* reduce ABlockStmtWithElse */
		    {
			ArrayList list = new16();
			push(goTo(4), list);
		    }
		    break;
                    case 17: /* reduce AFuncCallStmtWithElse */
		    {
			ArrayList list = new17();
			push(goTo(4), list);
		    }
		    break;
                    case 18: /* reduce AIfElseStmtWithElse */
		    {
			ArrayList list = new18();
			push(goTo(4), list);
		    }
		    break;
                    case 19: /* reduce AWhileStmtWithElse */
		    {
			ArrayList list = new19();
			push(goTo(4), list);
		    }
		    break;
                    case 20: /* reduce AAreturnstmtwithelse1StmtWithElse */
		    {
			ArrayList list = new20();
			push(goTo(4), list);
		    }
		    break;
                    case 21: /* reduce AAreturnstmtwithelse2StmtWithElse */
		    {
			ArrayList list = new21();
			push(goTo(4), list);
		    }
		    break;
                    case 22: /* reduce AAexprlist1ExprList */
		    {
			ArrayList list = new22();
			push(goTo(5), list);
		    }
		    break;
                    case 23: /* reduce AAexprlist2ExprList */
		    {
			ArrayList list = new23();
			push(goTo(5), list);
		    }
		    break;
                    case 24: /* reduce AFactorExpr */
		    {
			ArrayList list = new24();
			push(goTo(6), list);
		    }
		    break;
                    case 25: /* reduce APlusExpr */
		    {
			ArrayList list = new25();
			push(goTo(6), list);
		    }
		    break;
                    case 26: /* reduce AMinusExpr */
		    {
			ArrayList list = new26();
			push(goTo(6), list);
		    }
		    break;
                    case 27: /* reduce AExprParFactor */
		    {
			ArrayList list = new27();
			push(goTo(7), list);
		    }
		    break;
                    case 28: /* reduce AMultFactor */
		    {
			ArrayList list = new28();
			push(goTo(7), list);
		    }
		    break;
                    case 29: /* reduce ADivFactor */
		    {
			ArrayList list = new29();
			push(goTo(7), list);
		    }
		    break;
                    case 30: /* reduce AModFactor */
		    {
			ArrayList list = new30();
			push(goTo(7), list);
		    }
		    break;
                    case 31: /* reduce ATermExprPar */
		    {
			ArrayList list = new31();
			push(goTo(8), list);
		    }
		    break;
                    case 32: /* reduce AParExprPar */
		    {
			ArrayList list = new32();
			push(goTo(8), list);
		    }
		    break;
                    case 33: /* reduce ATermTermSign */
		    {
			ArrayList list = new33();
			push(goTo(9), list);
		    }
		    break;
                    case 34: /* reduce ASignPlusTermSign */
		    {
			ArrayList list = new34();
			push(goTo(9), list);
		    }
		    break;
                    case 35: /* reduce ASignMinusTermSign */
		    {
			ArrayList list = new35();
			push(goTo(9), list);
		    }
		    break;
                    case 36: /* reduce AIntConstTerm */
		    {
			ArrayList list = new36();
			push(goTo(10), list);
		    }
		    break;
                    case 37: /* reduce ACharConstTerm */
		    {
			ArrayList list = new37();
			push(goTo(10), list);
		    }
		    break;
                    case 38: /* reduce ALValueTerm */
		    {
			ArrayList list = new38();
			push(goTo(10), list);
		    }
		    break;
                    case 39: /* reduce AFuncCallTerm */
		    {
			ArrayList list = new39();
			push(goTo(10), list);
		    }
		    break;
                    case 40: /* reduce ACondCond */
		    {
			ArrayList list = new40();
			push(goTo(11), list);
		    }
		    break;
                    case 41: /* reduce ACondOrCond */
		    {
			ArrayList list = new41();
			push(goTo(11), list);
		    }
		    break;
                    case 42: /* reduce ACondCondAnd */
		    {
			ArrayList list = new42();
			push(goTo(12), list);
		    }
		    break;
                    case 43: /* reduce ACondAndCondAnd */
		    {
			ArrayList list = new43();
			push(goTo(12), list);
		    }
		    break;
                    case 44: /* reduce ACondCondNot */
		    {
			ArrayList list = new44();
			push(goTo(13), list);
		    }
		    break;
                    case 45: /* reduce ACondNotCondNot */
		    {
			ArrayList list = new45();
			push(goTo(13), list);
		    }
		    break;
                    case 46: /* reduce AExprCondPar */
		    {
			ArrayList list = new46();
			push(goTo(14), list);
		    }
		    break;
                    case 47: /* reduce ACondCondPar */
		    {
			ArrayList list = new47();
			push(goTo(14), list);
		    }
		    break;
                    case 48: /* reduce ACondRelatCondRelat */
		    {
			ArrayList list = new48();
			push(goTo(15), list);
		    }
		    break;
                    case 49: /* reduce AEqualRelatOper */
		    {
			ArrayList list = new49();
			push(goTo(16), list);
		    }
		    break;
                    case 50: /* reduce ANEqualRelatOper */
		    {
			ArrayList list = new50();
			push(goTo(16), list);
		    }
		    break;
                    case 51: /* reduce ALessRelatOper */
		    {
			ArrayList list = new51();
			push(goTo(16), list);
		    }
		    break;
                    case 52: /* reduce ALessEqualRelatOper */
		    {
			ArrayList list = new52();
			push(goTo(16), list);
		    }
		    break;
                    case 53: /* reduce AGreaterRelatOper */
		    {
			ArrayList list = new53();
			push(goTo(16), list);
		    }
		    break;
                    case 54: /* reduce AGreaterEqualRelatOper */
		    {
			ArrayList list = new54();
			push(goTo(16), list);
		    }
		    break;
                    case 55: /* reduce AAheader1Header */
		    {
			ArrayList list = new55();
			push(goTo(17), list);
		    }
		    break;
                    case 56: /* reduce AAheader2Header */
		    {
			ArrayList list = new56();
			push(goTo(17), list);
		    }
		    break;
                    case 57: /* reduce AAfunctionparameters1FunctionParameters */
		    {
			ArrayList list = new57();
			push(goTo(18), list);
		    }
		    break;
                    case 58: /* reduce AAfunctionparameters2FunctionParameters */
		    {
			ArrayList list = new58();
			push(goTo(18), list);
		    }
		    break;
                    case 59: /* reduce AFparametersDefinitionList */
		    {
			ArrayList list = new59();
			push(goTo(19), list);
		    }
		    break;
                    case 60: /* reduce AAfparametersdefinition1FparametersDefinition */
		    {
			ArrayList list = new60();
			push(goTo(20), list);
		    }
		    break;
                    case 61: /* reduce AAfparametersdefinition2FparametersDefinition */
		    {
			ArrayList list = new61();
			push(goTo(20), list);
		    }
		    break;
                    case 62: /* reduce AAvariablelist1VariableList */
		    {
			ArrayList list = new62();
			push(goTo(21), list);
		    }
		    break;
                    case 63: /* reduce AAvariablelist2VariableList */
		    {
			ArrayList list = new63();
			push(goTo(21), list);
		    }
		    break;
                    case 64: /* reduce ACommaIdentifier */
		    {
			ArrayList list = new64();
			push(goTo(22), list);
		    }
		    break;
                    case 65: /* reduce AVariableIdentifier */
		    {
			ArrayList list = new65();
			push(goTo(23), list);
		    }
		    break;
                    case 66: /* reduce AAfpartype1FparType */
		    {
			ArrayList list = new66();
			push(goTo(24), list);
		    }
		    break;
                    case 67: /* reduce AAfpartype2FparType */
		    {
			ArrayList list = new67();
			push(goTo(24), list);
		    }
		    break;
                    case 68: /* reduce AAfpartype3FparType */
		    {
			ArrayList list = new68();
			push(goTo(24), list);
		    }
		    break;
                    case 69: /* reduce AAfpartype4FparType */
		    {
			ArrayList list = new69();
			push(goTo(24), list);
		    }
		    break;
                    case 70: /* reduce AIntTypeDataType */
		    {
			ArrayList list = new70();
			push(goTo(25), list);
		    }
		    break;
                    case 71: /* reduce ACharTypeDataType */
		    {
			ArrayList list = new71();
			push(goTo(25), list);
		    }
		    break;
                    case 72: /* reduce ADataRetType */
		    {
			ArrayList list = new72();
			push(goTo(26), list);
		    }
		    break;
                    case 73: /* reduce ANothRetType */
		    {
			ArrayList list = new73();
			push(goTo(26), list);
		    }
		    break;
                    case 74: /* reduce AAtype1Type */
		    {
			ArrayList list = new74();
			push(goTo(27), list);
		    }
		    break;
                    case 75: /* reduce AAtype2Type */
		    {
			ArrayList list = new75();
			push(goTo(27), list);
		    }
		    break;
                    case 76: /* reduce AEmptyBrackets */
		    {
			ArrayList list = new76();
			push(goTo(28), list);
		    }
		    break;
                    case 77: /* reduce AConstIntBrackets */
		    {
			ArrayList list = new77();
			push(goTo(29), list);
		    }
		    break;
                    case 78: /* reduce AFuncDefLocalDefinition */
		    {
			ArrayList list = new78();
			push(goTo(30), list);
		    }
		    break;
                    case 79: /* reduce AFuncDeclLocalDefinition */
		    {
			ArrayList list = new79();
			push(goTo(30), list);
		    }
		    break;
                    case 80: /* reduce AVarDefLocalDefinition */
		    {
			ArrayList list = new80();
			push(goTo(30), list);
		    }
		    break;
                    case 81: /* reduce AVariableDefinition */
		    {
			ArrayList list = new81();
			push(goTo(31), list);
		    }
		    break;
                    case 82: /* reduce AFunctionDeclaration */
		    {
			ArrayList list = new82();
			push(goTo(32), list);
		    }
		    break;
                    case 83: /* reduce AAfunccall1FuncCall */
		    {
			ArrayList list = new83();
			push(goTo(33), list);
		    }
		    break;
                    case 84: /* reduce AAfunccall2FuncCall */
		    {
			ArrayList list = new84();
			push(goTo(33), list);
		    }
		    break;
                    case 85: /* reduce AAfunccallexpr1FuncCallExpr */
		    {
			ArrayList list = new85();
			push(goTo(34), list);
		    }
		    break;
                    case 86: /* reduce AAfunccallexpr2FuncCallExpr */
		    {
			ArrayList list = new86();
			push(goTo(34), list);
		    }
		    break;
                    case 87: /* reduce ACommaExpr */
		    {
			ArrayList list = new87();
			push(goTo(35), list);
		    }
		    break;
                    case 88: /* reduce AIdLValue */
		    {
			ArrayList list = new88();
			push(goTo(36), list);
		    }
		    break;
                    case 89: /* reduce AStringLiteralLValue */
		    {
			ArrayList list = new89();
			push(goTo(36), list);
		    }
		    break;
                    case 90: /* reduce ALValueLValue */
		    {
			ArrayList list = new90();
			push(goTo(36), list);
		    }
		    break;
                    case 91: /* reduce ATerminal$LocalDefinition */
		    {
			ArrayList list = new91();
			push(goTo(37), list);
		    }
		    break;
                    case 92: /* reduce ANonTerminal$LocalDefinition */
		    {
			ArrayList list = new92();
			push(goTo(37), list);
		    }
		    break;
                    case 93: /* reduce ATerminal$Stmt */
		    {
			ArrayList list = new93();
			push(goTo(38), list);
		    }
		    break;
                    case 94: /* reduce ANonTerminal$Stmt */
		    {
			ArrayList list = new94();
			push(goTo(38), list);
		    }
		    break;
                    case 95: /* reduce ATerminal$Expr */
		    {
			ArrayList list = new95();
			push(goTo(39), list);
		    }
		    break;
                    case 96: /* reduce ANonTerminal$Expr */
		    {
			ArrayList list = new96();
			push(goTo(39), list);
		    }
		    break;
                    case 97: /* reduce ATerminal$FparametersDefinitionList */
		    {
			ArrayList list = new97();
			push(goTo(40), list);
		    }
		    break;
                    case 98: /* reduce ANonTerminal$FparametersDefinitionList */
		    {
			ArrayList list = new98();
			push(goTo(40), list);
		    }
		    break;
                    case 99: /* reduce ATerminal$CommaIdentifier */
		    {
			ArrayList list = new99();
			push(goTo(41), list);
		    }
		    break;
                    case 100: /* reduce ANonTerminal$CommaIdentifier */
		    {
			ArrayList list = new100();
			push(goTo(41), list);
		    }
		    break;
                    case 101: /* reduce ATerminal$ConstIntBrackets */
		    {
			ArrayList list = new101();
			push(goTo(42), list);
		    }
		    break;
                    case 102: /* reduce ANonTerminal$ConstIntBrackets */
		    {
			ArrayList list = new102();
			push(goTo(42), list);
		    }
		    break;
                    case 103: /* reduce ATerminal$CommaExpr */
		    {
			ArrayList list = new103();
			push(goTo(43), list);
		    }
		    break;
                    case 104: /* reduce ANonTerminal$CommaExpr */
		    {
			ArrayList list = new104();
			push(goTo(43), list);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AProgram */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PFunDefinition pfundefinitionNode2;
        pfundefinitionNode2 = (PFunDefinition)nodeArrayList1.get(0);

        pprogramNode1 = new AProgram(pfundefinitionNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AAfunctiondefinition1FunctionDefinition */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFunDefinition pfundefinitionNode1;
        {
            // Block
        PHeader pheaderNode2;
        LinkedList listNode3 = new LinkedList();
        LinkedList listNode5 = new LinkedList();
        pheaderNode2 = (PHeader)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pfundefinitionNode1 = new AFunDefinition(pheaderNode2, listNode3, listNode5);
        }
	nodeList.add(pfundefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AAfunctiondefinition2FunctionDefinition */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFunDefinition pfundefinitionNode1;
        {
            // Block
        PHeader pheaderNode2;
        LinkedList listNode4 = new LinkedList();
        LinkedList listNode6 = new LinkedList();
        pheaderNode2 = (PHeader)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pfundefinitionNode1 = new AFunDefinition(pheaderNode2, listNode4, listNode6);
        }
	nodeList.add(pfundefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AAblock1Block */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode1 = new LinkedList();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AAblock2Block */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        listNode1 = (LinkedList)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce ASemiStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TSemi tsemiNode2;
        tsemiNode2 = (TSemi)nodeArrayList1.get(0);

        pstatementNode1 = new ASemiStatement(tsemiNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AAssignmentStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PLvalue plvalueNode2;
        PExpression pexpressionNode3;
        plvalueNode2 = (PLvalue)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AAssignStatement(plvalueNode2, pexpressionNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce ABlockStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pstatementNode1 = new ABlockStatement(listNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AFuncCallStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PFunctionCall pfunctioncallNode2;
        pfunctioncallNode2 = (PFunctionCall)nodeArrayList1.get(0);

        pstatementNode1 = new AFuncCallStatement(pfunctioncallNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AIfWithoutElseStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PCondition pconditionNode2;
        PStatement pstatementNode3;
        pconditionNode2 = (PCondition)nodeArrayList2.get(0);
        pstatementNode3 = (PStatement)nodeArrayList4.get(0);

        pstatementNode1 = new AIfWithoutElseStatement(pconditionNode2, pstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AIfWithElseStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PCondition pconditionNode2;
        PStatement pstatementNode3;
        PStatement pstatementNode4;
        pconditionNode2 = (PCondition)nodeArrayList2.get(0);
        pstatementNode3 = (PStatement)nodeArrayList4.get(0);
        pstatementNode4 = (PStatement)nodeArrayList6.get(0);

        pstatementNode1 = new AIfWithElseStatement(pconditionNode2, pstatementNode3, pstatementNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AWhileStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PCondition pconditionNode2;
        PStatement pstatementNode3;
        pconditionNode2 = (PCondition)nodeArrayList2.get(0);
        pstatementNode3 = (PStatement)nodeArrayList4.get(0);

        pstatementNode1 = new AWhileStatement(pconditionNode2, pstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AAreturnstmt1Stmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;

        pstatementNode1 = new AReturnStatement(null);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AAreturnstmt2Stmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pstatementNode1 = new AReturnStatement(pexpressionNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce ASemiStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TSemi tsemiNode2;
        tsemiNode2 = (TSemi)nodeArrayList1.get(0);

        pstatementNode1 = new ASemiStatement(tsemiNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce AAssignmentStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PLvalue plvalueNode2;
        PExpression pexpressionNode3;
        plvalueNode2 = (PLvalue)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AAssignStatement(plvalueNode2, pexpressionNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce ABlockStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pstatementNode1 = new ABlockStatement(listNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AFuncCallStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PFunctionCall pfunctioncallNode2;
        pfunctioncallNode2 = (PFunctionCall)nodeArrayList1.get(0);

        pstatementNode1 = new AFuncCallStatement(pfunctioncallNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce AIfElseStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PCondition pconditionNode2;
        PStatement pstatementNode3;
        PStatement pstatementNode4;
        pconditionNode2 = (PCondition)nodeArrayList2.get(0);
        pstatementNode3 = (PStatement)nodeArrayList4.get(0);
        pstatementNode4 = (PStatement)nodeArrayList6.get(0);

        pstatementNode1 = new AIfWithElseStatement(pconditionNode2, pstatementNode3, pstatementNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce AWhileStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PCondition pconditionNode2;
        PStatement pstatementNode3;
        pconditionNode2 = (PCondition)nodeArrayList2.get(0);
        pstatementNode3 = (PStatement)nodeArrayList4.get(0);

        pstatementNode1 = new AWhileStatement(pconditionNode2, pstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce AAreturnstmtwithelse1StmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;

        pstatementNode1 = new AReturnStatement(null);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AAreturnstmtwithelse2StmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pstatementNode1 = new AReturnStatement(pexpressionNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce AAexprlist1ExprList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        LinkedList listNode1 = new LinkedList();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce AAexprlist2ExprList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        listNode1 = (LinkedList)nodeArrayList1.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce AFactorExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce APlusExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new APlusExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce AMinusExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AMinusExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce AExprParFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce AMultFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AMultExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce ADivFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ADivExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce AModFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AModExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce ATermExprPar */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce AParExprPar */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList2.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce ATermTermSign */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce ASignPlusTermSign */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pexpressionNode1 = new APosExpression(pexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce ASignMinusTermSign */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pexpressionNode1 = new ANegExpression(pexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce AIntConstTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pexpressionNode1 = new AIntExpression(tnumberNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce ACharConstTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TConstChar tconstcharNode2;
        tconstcharNode2 = (TConstChar)nodeArrayList1.get(0);

        pexpressionNode1 = new ACharExpression(tconstcharNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce ALValueTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PLvalue plvalueNode2;
        plvalueNode2 = (PLvalue)nodeArrayList1.get(0);

        pexpressionNode1 = new AValExpression(plvalueNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce AFuncCallTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PFunctionCall pfunctioncallNode2;
        pfunctioncallNode2 = (PFunctionCall)nodeArrayList1.get(0);

        pexpressionNode1 = new AFunExpression(pfunctioncallNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new40() /* reduce ACondCond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCondition pconditionNode1;
        pconditionNode1 = (PCondition)nodeArrayList1.get(0);
	nodeList.add(pconditionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new41() /* reduce ACondOrCond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCondition pconditionNode1;
        {
            // Block
        PCondition pconditionNode2;
        PCondition pconditionNode3;
        pconditionNode2 = (PCondition)nodeArrayList1.get(0);
        pconditionNode3 = (PCondition)nodeArrayList3.get(0);

        pconditionNode1 = new AOrCondition(pconditionNode2, pconditionNode3);
        }
	nodeList.add(pconditionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new42() /* reduce ACondCondAnd */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCondition pconditionNode1;
        pconditionNode1 = (PCondition)nodeArrayList1.get(0);
	nodeList.add(pconditionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new43() /* reduce ACondAndCondAnd */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCondition pconditionNode1;
        {
            // Block
        PCondition pconditionNode2;
        PCondition pconditionNode3;
        pconditionNode2 = (PCondition)nodeArrayList1.get(0);
        pconditionNode3 = (PCondition)nodeArrayList3.get(0);

        pconditionNode1 = new AAndCondition(pconditionNode2, pconditionNode3);
        }
	nodeList.add(pconditionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new44() /* reduce ACondCondNot */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCondition pconditionNode1;
        pconditionNode1 = (PCondition)nodeArrayList1.get(0);
	nodeList.add(pconditionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new45() /* reduce ACondNotCondNot */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCondition pconditionNode1;
        {
            // Block
        PCondition pconditionNode2;
        pconditionNode2 = (PCondition)nodeArrayList2.get(0);

        pconditionNode1 = new ANotCondition(pconditionNode2);
        }
	nodeList.add(pconditionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new46() /* reduce AExprCondPar */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCondition pconditionNode1;
        pconditionNode1 = (PCondition)nodeArrayList1.get(0);
	nodeList.add(pconditionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new47() /* reduce ACondCondPar */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCondition pconditionNode1;
        {
            // Block
        PCondition pconditionNode2;
        pconditionNode2 = (PCondition)nodeArrayList2.get(0);

        pconditionNode1 = new AParCondition(pconditionNode2);
        }
	nodeList.add(pconditionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new48() /* reduce ACondRelatCondRelat */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCondition pconditionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PRelationOper prelationoperNode3;
        PExpression pexpressionNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        prelationoperNode3 = (PRelationOper)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pconditionNode1 = new ARelatCondition(pexpressionNode2, prelationoperNode3, pexpressionNode4);
        }
	nodeList.add(pconditionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new49() /* reduce AEqualRelatOper */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRelationOper prelationoperNode1;
        {
            // Block
        TEqual tequalNode2;
        tequalNode2 = (TEqual)nodeArrayList1.get(0);

        prelationoperNode1 = new AEqualRelationOper(tequalNode2);
        }
	nodeList.add(prelationoperNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new50() /* reduce ANEqualRelatOper */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRelationOper prelationoperNode1;
        {
            // Block
        TNEqual tnequalNode2;
        tnequalNode2 = (TNEqual)nodeArrayList1.get(0);

        prelationoperNode1 = new ANEqualRelationOper(tnequalNode2);
        }
	nodeList.add(prelationoperNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new51() /* reduce ALessRelatOper */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRelationOper prelationoperNode1;
        {
            // Block
        TLess tlessNode2;
        tlessNode2 = (TLess)nodeArrayList1.get(0);

        prelationoperNode1 = new ALessRelationOper(tlessNode2);
        }
	nodeList.add(prelationoperNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new52() /* reduce ALessEqualRelatOper */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRelationOper prelationoperNode1;
        {
            // Block
        TLessEqual tlessequalNode2;
        tlessequalNode2 = (TLessEqual)nodeArrayList1.get(0);

        prelationoperNode1 = new ALessEqualRelationOper(tlessequalNode2);
        }
	nodeList.add(prelationoperNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new53() /* reduce AGreaterRelatOper */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRelationOper prelationoperNode1;
        {
            // Block
        TGreater tgreaterNode2;
        tgreaterNode2 = (TGreater)nodeArrayList1.get(0);

        prelationoperNode1 = new AGreaterRelationOper(tgreaterNode2);
        }
	nodeList.add(prelationoperNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new54() /* reduce AGreaterEqualRelatOper */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRelationOper prelationoperNode1;
        {
            // Block
        TGreaterEqual tgreaterequalNode2;
        tgreaterequalNode2 = (TGreaterEqual)nodeArrayList1.get(0);

        prelationoperNode1 = new AGreaterEqualRelationOper(tgreaterequalNode2);
        }
	nodeList.add(prelationoperNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new55() /* reduce AAheader1Header */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PHeader pheaderNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList listNode3 = new LinkedList();
        PGeneralType pgeneraltypeNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        }
        pgeneraltypeNode4 = (PGeneralType)nodeArrayList6.get(0);

        pheaderNode1 = new AHeader(tidentifierNode2, listNode3, pgeneraltypeNode4);
        }
	nodeList.add(pheaderNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new56() /* reduce AAheader2Header */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PHeader pheaderNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList listNode4 = new LinkedList();
        PGeneralType pgeneraltypeNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pgeneraltypeNode5 = (PGeneralType)nodeArrayList7.get(0);

        pheaderNode1 = new AHeader(tidentifierNode2, listNode4, pgeneraltypeNode5);
        }
	nodeList.add(pheaderNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new57() /* reduce AAfunctionparameters1FunctionParameters */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PFparDefinition pfpardefinitionNode1;
        pfpardefinitionNode1 = (PFparDefinition)nodeArrayList1.get(0);
	if(pfpardefinitionNode1 != null)
	{
	  listNode2.add(pfpardefinitionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new58() /* reduce AAfunctionparameters2FunctionParameters */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PFparDefinition pfpardefinitionNode1;
        LinkedList listNode2 = new LinkedList();
        pfpardefinitionNode1 = (PFparDefinition)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(pfpardefinitionNode1 != null)
	{
	  listNode3.add(pfpardefinitionNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new59() /* reduce AFparametersDefinitionList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDefinition pfpardefinitionNode1;
        pfpardefinitionNode1 = (PFparDefinition)nodeArrayList2.get(0);
	nodeList.add(pfpardefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new60() /* reduce AAfparametersdefinition1FparametersDefinition */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDefinition pfpardefinitionNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        LinkedList listNode4 = new LinkedList();
        PFparType pfpartypeNode5;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList1.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pfpartypeNode5 = (PFparType)nodeArrayList3.get(0);

        pfpardefinitionNode1 = new AFparDefinition(null, listNode4, pfpartypeNode5);
        }
	nodeList.add(pfpardefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new61() /* reduce AAfparametersdefinition2FparametersDefinition */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparDefinition pfpardefinitionNode1;
        {
            // Block
        TReference treferenceNode2;
        LinkedList listNode4 = new LinkedList();
        PFparType pfpartypeNode5;
        treferenceNode2 = (TReference)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pfpartypeNode5 = (PFparType)nodeArrayList4.get(0);

        pfpardefinitionNode1 = new AFparDefinition(treferenceNode2, listNode4, pfpartypeNode5);
        }
	nodeList.add(pfpardefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new62() /* reduce AAvariablelist1VariableList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PVarIdentifier pvaridentifierNode1;
        pvaridentifierNode1 = (PVarIdentifier)nodeArrayList1.get(0);
	if(pvaridentifierNode1 != null)
	{
	  listNode2.add(pvaridentifierNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new63() /* reduce AAvariablelist2VariableList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PVarIdentifier pvaridentifierNode1;
        LinkedList listNode2 = new LinkedList();
        pvaridentifierNode1 = (PVarIdentifier)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(pvaridentifierNode1 != null)
	{
	  listNode3.add(pvaridentifierNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new64() /* reduce ACommaIdentifier */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarIdentifier pvaridentifierNode1;
        pvaridentifierNode1 = (PVarIdentifier)nodeArrayList2.get(0);
	nodeList.add(pvaridentifierNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new65() /* reduce AVariableIdentifier */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarIdentifier pvaridentifierNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pvaridentifierNode1 = new AVarIdentifier(tidentifierNode2);
        }
	nodeList.add(pvaridentifierNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new66() /* reduce AAfpartype1FparType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparType pfpartypeNode1;
        {
            // Block
        PGeneralType pgeneraltypeNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList listNode4 = new LinkedList();
        pgeneraltypeNode2 = (PGeneralType)nodeArrayList1.get(0);
        {
            // Block
        }

        pfpartypeNode1 = new AFparType(pgeneraltypeNode2, null, listNode4);
        }
	nodeList.add(pfpartypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new67() /* reduce AAfpartype2FparType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparType pfpartypeNode1;
        {
            // Block
        PGeneralType pgeneraltypeNode2;
        PEmptyBr pemptybrNode3;
        LinkedList listNode4 = new LinkedList();
        pgeneraltypeNode2 = (PGeneralType)nodeArrayList1.get(0);
        pemptybrNode3 = (PEmptyBr)nodeArrayList2.get(0);
        {
            // Block
        }

        pfpartypeNode1 = new AFparType(pgeneraltypeNode2, pemptybrNode3, listNode4);
        }
	nodeList.add(pfpartypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new68() /* reduce AAfpartype3FparType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparType pfpartypeNode1;
        {
            // Block
        PGeneralType pgeneraltypeNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList listNode5 = new LinkedList();
        pgeneraltypeNode2 = (PGeneralType)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pfpartypeNode1 = new AFparType(pgeneraltypeNode2, null, listNode5);
        }
	nodeList.add(pfpartypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new69() /* reduce AAfpartype4FparType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparType pfpartypeNode1;
        {
            // Block
        PGeneralType pgeneraltypeNode2;
        PEmptyBr pemptybrNode3;
        LinkedList listNode5 = new LinkedList();
        pgeneraltypeNode2 = (PGeneralType)nodeArrayList1.get(0);
        pemptybrNode3 = (PEmptyBr)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pfpartypeNode1 = new AFparType(pgeneraltypeNode2, pemptybrNode3, listNode5);
        }
	nodeList.add(pfpartypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new70() /* reduce AIntTypeDataType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PGeneralType pgeneraltypeNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        pgeneraltypeNode1 = new AIntGeneralType(tintNode2);
        }
	nodeList.add(pgeneraltypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new71() /* reduce ACharTypeDataType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PGeneralType pgeneraltypeNode1;
        {
            // Block
        TChar tcharNode2;
        tcharNode2 = (TChar)nodeArrayList1.get(0);

        pgeneraltypeNode1 = new ACharGeneralType(tcharNode2);
        }
	nodeList.add(pgeneraltypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new72() /* reduce ADataRetType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PGeneralType pgeneraltypeNode1;
        pgeneraltypeNode1 = (PGeneralType)nodeArrayList1.get(0);
	nodeList.add(pgeneraltypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new73() /* reduce ANothRetType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PGeneralType pgeneraltypeNode1;
        {
            // Block
        TNothing tnothingNode2;
        tnothingNode2 = (TNothing)nodeArrayList1.get(0);

        pgeneraltypeNode1 = new ANothGeneralType(tnothingNode2);
        }
	nodeList.add(pgeneraltypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new74() /* reduce AAtype1Type */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarType pvartypeNode1;
        {
            // Block
        PGeneralType pgeneraltypeNode2;
        LinkedList listNode3 = new LinkedList();
        pgeneraltypeNode2 = (PGeneralType)nodeArrayList1.get(0);
        {
            // Block
        }

        pvartypeNode1 = new AVarType(pgeneraltypeNode2, listNode3);
        }
	nodeList.add(pvartypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new75() /* reduce AAtype2Type */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarType pvartypeNode1;
        {
            // Block
        PGeneralType pgeneraltypeNode2;
        LinkedList listNode4 = new LinkedList();
        pgeneraltypeNode2 = (PGeneralType)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pvartypeNode1 = new AVarType(pgeneraltypeNode2, listNode4);
        }
	nodeList.add(pvartypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new76() /* reduce AEmptyBrackets */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PEmptyBr pemptybrNode1;
        {
            // Block

        pemptybrNode1 = new AEmptyBr();
        }
	nodeList.add(pemptybrNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new77() /* reduce AConstIntBrackets */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConstIntBr pconstintbrNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList2.get(0);

        pconstintbrNode1 = new AConstIntBr(tnumberNode2);
        }
	nodeList.add(pconstintbrNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new78() /* reduce AFuncDefLocalDefinition */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLocalDef plocaldefNode1;
        {
            // Block
        PFunDefinition pfundefinitionNode2;
        pfundefinitionNode2 = (PFunDefinition)nodeArrayList1.get(0);

        plocaldefNode1 = new AFunDefLocalDef(pfundefinitionNode2);
        }
	nodeList.add(plocaldefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new79() /* reduce AFuncDeclLocalDefinition */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLocalDef plocaldefNode1;
        {
            // Block
        PHeader pheaderNode2;
        pheaderNode2 = (PHeader)nodeArrayList1.get(0);

        plocaldefNode1 = new AFunDeclLocalDef(pheaderNode2);
        }
	nodeList.add(plocaldefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new80() /* reduce AVarDefLocalDefinition */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLocalDef plocaldefNode1;
        {
            // Block
        PVarDefinition pvardefinitionNode2;
        pvardefinitionNode2 = (PVarDefinition)nodeArrayList1.get(0);

        plocaldefNode1 = new AVarDefLocalDef(pvardefinitionNode2);
        }
	nodeList.add(plocaldefNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new81() /* reduce AVariableDefinition */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVarDefinition pvardefinitionNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        PVarType pvartypeNode4;
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pvartypeNode4 = (PVarType)nodeArrayList4.get(0);

        pvardefinitionNode1 = new AVarDefinition(listNode3, pvartypeNode4);
        }
	nodeList.add(pvardefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new82() /* reduce AFunctionDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PHeader pheaderNode1;
        pheaderNode1 = (PHeader)nodeArrayList1.get(0);
	nodeList.add(pheaderNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new83() /* reduce AAfunccall1FuncCall */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFunctionCall pfunctioncallNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pfunctioncallNode1 = new AFunctionCall(tidentifierNode2, null);
        }
	nodeList.add(pfunctioncallNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new84() /* reduce AAfunccall2FuncCall */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFunctionCall pfunctioncallNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PExprList pexprlistNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        pexprlistNode3 = (PExprList)nodeArrayList3.get(0);

        pfunctioncallNode1 = new AFunctionCall(tidentifierNode2, pexprlistNode3);
        }
	nodeList.add(pfunctioncallNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new85() /* reduce AAfunccallexpr1FuncCallExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExprList pexprlistNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
	if(pexpressionNode2 != null)
	{
	  listNode3.add(pexpressionNode2);
	}
        }

        pexprlistNode1 = new AExprList(listNode3);
        }
	nodeList.add(pexprlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new86() /* reduce AAfunccallexpr2FuncCallExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExprList pexprlistNode1;
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList listNode3 = new LinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(pexpressionNode2 != null)
	{
	  listNode4.add(pexpressionNode2);
	}
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexprlistNode1 = new AExprList(listNode4);
        }
	nodeList.add(pexprlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new87() /* reduce ACommaExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList2.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new88() /* reduce AIdLValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLvalue plvalueNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        plvalueNode1 = new AIdLvalue(tidentifierNode2);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new89() /* reduce AStringLiteralLValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLvalue plvalueNode1;
        {
            // Block
        TConstString tconststringNode2;
        tconststringNode2 = (TConstString)nodeArrayList1.get(0);

        plvalueNode1 = new AStrLvalue(tconststringNode2);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new90() /* reduce ALValueLValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLvalue plvalueNode1;
        {
            // Block
        PLvalue plvalueNode2;
        PExpression pexpressionNode3;
        plvalueNode2 = (PLvalue)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        plvalueNode1 = new AValLvalue(plvalueNode2, pexpressionNode3);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new91() /* reduce ATerminal$LocalDefinition */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PLocalDef plocaldefNode1;
        plocaldefNode1 = (PLocalDef)nodeArrayList1.get(0);
	if(plocaldefNode1 != null)
	{
	  listNode2.add(plocaldefNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new92() /* reduce ANonTerminal$LocalDefinition */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PLocalDef plocaldefNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        plocaldefNode2 = (PLocalDef)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(plocaldefNode2 != null)
	{
	  listNode3.add(plocaldefNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new93() /* reduce ATerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	if(pstatementNode1 != null)
	{
	  listNode2.add(pstatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new94() /* reduce ANonTerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PStatement pstatementNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstatementNode2 = (PStatement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstatementNode2 != null)
	{
	  listNode3.add(pstatementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new95() /* reduce ATerminal$Expr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	if(pexpressionNode1 != null)
	{
	  listNode2.add(pexpressionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new96() /* reduce ANonTerminal$Expr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PExpression pexpressionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpressionNode2 != null)
	{
	  listNode3.add(pexpressionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new97() /* reduce ATerminal$FparametersDefinitionList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PFparDefinition pfpardefinitionNode1;
        pfpardefinitionNode1 = (PFparDefinition)nodeArrayList1.get(0);
	if(pfpardefinitionNode1 != null)
	{
	  listNode2.add(pfpardefinitionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new98() /* reduce ANonTerminal$FparametersDefinitionList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PFparDefinition pfpardefinitionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pfpardefinitionNode2 = (PFparDefinition)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pfpardefinitionNode2 != null)
	{
	  listNode3.add(pfpardefinitionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new99() /* reduce ATerminal$CommaIdentifier */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PVarIdentifier pvaridentifierNode1;
        pvaridentifierNode1 = (PVarIdentifier)nodeArrayList1.get(0);
	if(pvaridentifierNode1 != null)
	{
	  listNode2.add(pvaridentifierNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new100() /* reduce ANonTerminal$CommaIdentifier */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PVarIdentifier pvaridentifierNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvaridentifierNode2 = (PVarIdentifier)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvaridentifierNode2 != null)
	{
	  listNode3.add(pvaridentifierNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new101() /* reduce ATerminal$ConstIntBrackets */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PConstIntBr pconstintbrNode1;
        pconstintbrNode1 = (PConstIntBr)nodeArrayList1.get(0);
	if(pconstintbrNode1 != null)
	{
	  listNode2.add(pconstintbrNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new102() /* reduce ANonTerminal$ConstIntBrackets */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PConstIntBr pconstintbrNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pconstintbrNode2 = (PConstIntBr)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pconstintbrNode2 != null)
	{
	  listNode3.add(pconstintbrNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new103() /* reduce ATerminal$CommaExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	if(pexpressionNode1 != null)
	{
	  listNode2.add(pexpressionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new104() /* reduce ANonTerminal$CommaExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PExpression pexpressionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpressionNode2 != null)
	{
	  listNode3.add(pexpressionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {36, SHIFT, 1}, },
			{{-1, ERROR, 1}, {40, SHIFT, 5}, },
			{{-1, ERROR, 2}, {42, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 4}, {15, SHIFT, 6}, {36, SHIFT, 1}, {39, SHIFT, 7}, },
			{{-1, ERROR, 5}, {13, SHIFT, 15}, },
			{{-1, ERROR, 6}, {15, SHIFT, 6}, {16, SHIFT, 16}, {19, SHIFT, 17}, {24, SHIFT, 18}, {30, SHIFT, 19}, {33, SHIFT, 20}, {38, SHIFT, 21}, {40, SHIFT, 22}, },
			{{-1, ERROR, 7}, {40, SHIFT, 28}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 10}, {15, SHIFT, 6}, {19, SHIFT, 31}, {36, SHIFT, 1}, {39, SHIFT, 7}, },
			{{-1, REDUCE, 91}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 79}, },
			{{-1, ERROR, 14}, {15, SHIFT, 6}, {36, SHIFT, 1}, {39, SHIFT, 7}, },
			{{-1, ERROR, 15}, {14, SHIFT, 34}, {37, SHIFT, 35}, {40, SHIFT, 28}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 89}, },
			{{-1, ERROR, 19}, {0, SHIFT, 39}, {1, SHIFT, 40}, {13, SHIFT, 41}, {22, SHIFT, 42}, {23, SHIFT, 43}, {24, SHIFT, 18}, {29, SHIFT, 44}, {40, SHIFT, 22}, },
			{{-1, ERROR, 20}, {0, SHIFT, 39}, {1, SHIFT, 40}, {13, SHIFT, 41}, {22, SHIFT, 42}, {23, SHIFT, 43}, {24, SHIFT, 18}, {29, SHIFT, 44}, {40, SHIFT, 22}, },
			{{-1, ERROR, 21}, {0, SHIFT, 39}, {1, SHIFT, 40}, {13, SHIFT, 58}, {19, SHIFT, 59}, {22, SHIFT, 42}, {23, SHIFT, 43}, {24, SHIFT, 18}, {40, SHIFT, 22}, },
			{{-1, REDUCE, 88}, {13, SHIFT, 61}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 93}, },
			{{-1, ERROR, 25}, {19, SHIFT, 62}, },
			{{-1, ERROR, 26}, {6, SHIFT, 63}, {17, SHIFT, 64}, },
			{{-1, ERROR, 27}, {15, SHIFT, 6}, {16, SHIFT, 65}, {19, SHIFT, 17}, {24, SHIFT, 18}, {30, SHIFT, 19}, {33, SHIFT, 20}, {38, SHIFT, 21}, {40, SHIFT, 22}, },
			{{-1, REDUCE, 65}, },
			{{-1, ERROR, 29}, {21, SHIFT, 67}, },
			{{-1, REDUCE, 62}, {20, SHIFT, 68}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 92}, },
			{{-1, ERROR, 34}, {21, SHIFT, 71}, },
			{{-1, ERROR, 35}, {40, SHIFT, 28}, },
			{{-1, ERROR, 36}, {14, SHIFT, 73}, },
			{{-1, REDUCE, 57}, {19, SHIFT, 74}, },
			{{-1, ERROR, 38}, {21, SHIFT, 77}, },
			{{-1, ERROR, 39}, {22, SHIFT, 42}, {23, SHIFT, 43}, {24, SHIFT, 18}, {40, SHIFT, 22}, },
			{{-1, ERROR, 40}, {22, SHIFT, 42}, {23, SHIFT, 43}, {24, SHIFT, 18}, {40, SHIFT, 22}, },
			{{-1, ERROR, 41}, {0, SHIFT, 39}, {1, SHIFT, 40}, {13, SHIFT, 41}, {22, SHIFT, 42}, {23, SHIFT, 43}, {24, SHIFT, 18}, {29, SHIFT, 44}, {40, SHIFT, 22}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 44}, {0, SHIFT, 39}, {1, SHIFT, 40}, {13, SHIFT, 41}, {22, SHIFT, 42}, {23, SHIFT, 43}, {24, SHIFT, 18}, {29, SHIFT, 44}, {40, SHIFT, 22}, },
			{{-1, ERROR, 45}, {0, SHIFT, 83}, {1, SHIFT, 84}, {7, SHIFT, 85}, {8, SHIFT, 86}, {9, SHIFT, 87}, {10, SHIFT, 88}, {11, SHIFT, 89}, {12, SHIFT, 90}, },
			{{-1, REDUCE, 24}, {2, SHIFT, 92}, {4, SHIFT, 93}, {5, SHIFT, 94}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 50}, {28, SHIFT, 95}, {31, SHIFT, 96}, },
			{{-1, REDUCE, 40}, {27, SHIFT, 97}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 38}, {17, SHIFT, 64}, },
			{{-1, ERROR, 57}, {28, SHIFT, 95}, {34, SHIFT, 98}, },
			{{-1, ERROR, 58}, {0, SHIFT, 39}, {1, SHIFT, 40}, {13, SHIFT, 58}, {22, SHIFT, 42}, {23, SHIFT, 43}, {24, SHIFT, 18}, {40, SHIFT, 22}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 60}, {0, SHIFT, 83}, {1, SHIFT, 84}, {19, SHIFT, 100}, },
			{{-1, ERROR, 61}, {0, SHIFT, 39}, {1, SHIFT, 40}, {13, SHIFT, 58}, {14, SHIFT, 101}, {22, SHIFT, 42}, {23, SHIFT, 43}, {24, SHIFT, 18}, {40, SHIFT, 22}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 63}, {0, SHIFT, 39}, {1, SHIFT, 40}, {13, SHIFT, 58}, {22, SHIFT, 42}, {23, SHIFT, 43}, {24, SHIFT, 18}, {40, SHIFT, 22}, },
			{{-1, ERROR, 64}, {0, SHIFT, 39}, {1, SHIFT, 40}, {13, SHIFT, 58}, {22, SHIFT, 42}, {23, SHIFT, 43}, {24, SHIFT, 18}, {40, SHIFT, 22}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 94}, },
			{{-1, ERROR, 67}, {25, SHIFT, 106}, {26, SHIFT, 107}, },
			{{-1, ERROR, 68}, {40, SHIFT, 28}, },
			{{-1, REDUCE, 99}, },
			{{-1, REDUCE, 63}, {20, SHIFT, 68}, },
			{{-1, ERROR, 71}, {25, SHIFT, 106}, {26, SHIFT, 107}, {35, SHIFT, 112}, },
			{{-1, ERROR, 72}, {21, SHIFT, 115}, },
			{{-1, ERROR, 73}, {21, SHIFT, 116}, },
			{{-1, ERROR, 74}, {37, SHIFT, 35}, {40, SHIFT, 28}, },
			{{-1, REDUCE, 97}, },
			{{-1, REDUCE, 58}, {19, SHIFT, 74}, },
			{{-1, ERROR, 77}, {25, SHIFT, 106}, {26, SHIFT, 107}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 80}, {0, SHIFT, 83}, {1, SHIFT, 84}, {7, SHIFT, 85}, {8, SHIFT, 86}, {9, SHIFT, 87}, {10, SHIFT, 88}, {11, SHIFT, 89}, {12, SHIFT, 90}, {14, SHIFT, 121}, },
			{{-1, ERROR, 81}, {14, SHIFT, 122}, {28, SHIFT, 95}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 83}, {0, SHIFT, 39}, {1, SHIFT, 40}, {13, SHIFT, 58}, {22, SHIFT, 42}, {23, SHIFT, 43}, {24, SHIFT, 18}, {40, SHIFT, 22}, },
			{{-1, ERROR, 84}, {0, SHIFT, 39}, {1, SHIFT, 40}, {13, SHIFT, 58}, {22, SHIFT, 42}, {23, SHIFT, 43}, {24, SHIFT, 18}, {40, SHIFT, 22}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 91}, {0, SHIFT, 39}, {1, SHIFT, 40}, {13, SHIFT, 58}, {22, SHIFT, 42}, {23, SHIFT, 43}, {24, SHIFT, 18}, {40, SHIFT, 22}, },
			{{-1, ERROR, 92}, {0, SHIFT, 39}, {1, SHIFT, 40}, {13, SHIFT, 58}, {22, SHIFT, 42}, {23, SHIFT, 43}, {24, SHIFT, 18}, {40, SHIFT, 22}, },
			{{-1, ERROR, 93}, {0, SHIFT, 39}, {1, SHIFT, 40}, {13, SHIFT, 58}, {22, SHIFT, 42}, {23, SHIFT, 43}, {24, SHIFT, 18}, {40, SHIFT, 22}, },
			{{-1, ERROR, 94}, {0, SHIFT, 39}, {1, SHIFT, 40}, {13, SHIFT, 58}, {22, SHIFT, 42}, {23, SHIFT, 43}, {24, SHIFT, 18}, {40, SHIFT, 22}, },
			{{-1, ERROR, 95}, {0, SHIFT, 39}, {1, SHIFT, 40}, {13, SHIFT, 41}, {22, SHIFT, 42}, {23, SHIFT, 43}, {24, SHIFT, 18}, {29, SHIFT, 44}, {40, SHIFT, 22}, },
			{{-1, ERROR, 96}, {15, SHIFT, 6}, {19, SHIFT, 130}, {24, SHIFT, 18}, {30, SHIFT, 131}, {33, SHIFT, 132}, {38, SHIFT, 133}, {40, SHIFT, 22}, },
			{{-1, ERROR, 97}, {0, SHIFT, 39}, {1, SHIFT, 40}, {13, SHIFT, 41}, {22, SHIFT, 42}, {23, SHIFT, 43}, {24, SHIFT, 18}, {29, SHIFT, 44}, {40, SHIFT, 22}, },
			{{-1, ERROR, 98}, {15, SHIFT, 6}, {19, SHIFT, 17}, {24, SHIFT, 18}, {30, SHIFT, 19}, {33, SHIFT, 20}, {38, SHIFT, 21}, {40, SHIFT, 22}, },
			{{-1, ERROR, 99}, {0, SHIFT, 83}, {1, SHIFT, 84}, {14, SHIFT, 121}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 85}, {0, SHIFT, 83}, {1, SHIFT, 84}, {20, SHIFT, 141}, },
			{{-1, ERROR, 103}, {14, SHIFT, 144}, },
			{{-1, ERROR, 104}, {0, SHIFT, 83}, {1, SHIFT, 84}, {19, SHIFT, 145}, },
			{{-1, ERROR, 105}, {0, SHIFT, 83}, {1, SHIFT, 84}, {18, SHIFT, 146}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 74}, {17, SHIFT, 147}, },
			{{-1, ERROR, 109}, {19, SHIFT, 150}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 100}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 115}, {25, SHIFT, 106}, {26, SHIFT, 107}, },
			{{-1, ERROR, 116}, {25, SHIFT, 106}, {26, SHIFT, 107}, {35, SHIFT, 112}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 98}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 66}, {17, SHIFT, 153}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 25}, {2, SHIFT, 92}, {4, SHIFT, 93}, {5, SHIFT, 94}, },
			{{-1, REDUCE, 26}, {2, SHIFT, 92}, {4, SHIFT, 93}, {5, SHIFT, 94}, },
			{{-1, REDUCE, 48}, {0, SHIFT, 83}, {1, SHIFT, 84}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 41}, {27, SHIFT, 97}, },
			{{-1, REDUCE, 5}, {32, REDUCE, 14}, },
			{{-1, ERROR, 131}, {0, SHIFT, 39}, {1, SHIFT, 40}, {13, SHIFT, 41}, {22, SHIFT, 42}, {23, SHIFT, 43}, {24, SHIFT, 18}, {29, SHIFT, 44}, {40, SHIFT, 22}, },
			{{-1, ERROR, 132}, {0, SHIFT, 39}, {1, SHIFT, 40}, {13, SHIFT, 41}, {22, SHIFT, 42}, {23, SHIFT, 43}, {24, SHIFT, 18}, {29, SHIFT, 44}, {40, SHIFT, 22}, },
			{{-1, ERROR, 133}, {0, SHIFT, 39}, {1, SHIFT, 40}, {13, SHIFT, 58}, {19, SHIFT, 158}, {22, SHIFT, 42}, {23, SHIFT, 43}, {24, SHIFT, 18}, {40, SHIFT, 22}, },
			{{-1, REDUCE, 7}, {32, REDUCE, 16}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 136}, {32, SHIFT, 160}, },
			{{-1, ERROR, 137}, {19, SHIFT, 161}, },
			{{-1, ERROR, 138}, {6, SHIFT, 162}, {17, SHIFT, 64}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 141}, {0, SHIFT, 39}, {1, SHIFT, 40}, {13, SHIFT, 58}, {22, SHIFT, 42}, {23, SHIFT, 43}, {24, SHIFT, 18}, {40, SHIFT, 22}, },
			{{-1, REDUCE, 103}, },
			{{-1, REDUCE, 86}, {20, SHIFT, 141}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 90}, },
			{{-1, ERROR, 147}, {22, SHIFT, 165}, },
			{{-1, REDUCE, 101}, },
			{{-1, REDUCE, 75}, {17, SHIFT, 147}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 153}, {18, SHIFT, 167}, {22, SHIFT, 165}, },
			{{-1, REDUCE, 67}, {17, SHIFT, 147}, },
			{{-1, REDUCE, 68}, {17, SHIFT, 147}, },
			{{-1, ERROR, 156}, {28, SHIFT, 95}, {31, SHIFT, 169}, },
			{{-1, ERROR, 157}, {28, SHIFT, 95}, {34, SHIFT, 170}, },
			{{-1, REDUCE, 12}, {32, REDUCE, 20}, },
			{{-1, ERROR, 159}, {0, SHIFT, 83}, {1, SHIFT, 84}, {19, SHIFT, 171}, },
			{{-1, ERROR, 160}, {15, SHIFT, 6}, {19, SHIFT, 17}, {24, SHIFT, 18}, {30, SHIFT, 19}, {33, SHIFT, 20}, {38, SHIFT, 21}, {40, SHIFT, 22}, },
			{{-1, REDUCE, 8}, {32, REDUCE, 17}, },
			{{-1, ERROR, 162}, {0, SHIFT, 39}, {1, SHIFT, 40}, {13, SHIFT, 58}, {22, SHIFT, 42}, {23, SHIFT, 43}, {24, SHIFT, 18}, {40, SHIFT, 22}, },
			{{-1, REDUCE, 87}, {0, SHIFT, 83}, {1, SHIFT, 84}, },
			{{-1, REDUCE, 104}, },
			{{-1, ERROR, 165}, {18, SHIFT, 174}, },
			{{-1, REDUCE, 102}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 69}, {17, SHIFT, 147}, },
			{{-1, ERROR, 169}, {15, SHIFT, 6}, {19, SHIFT, 130}, {24, SHIFT, 18}, {30, SHIFT, 131}, {33, SHIFT, 132}, {38, SHIFT, 133}, {40, SHIFT, 22}, },
			{{-1, ERROR, 170}, {15, SHIFT, 6}, {19, SHIFT, 130}, {24, SHIFT, 18}, {30, SHIFT, 131}, {33, SHIFT, 132}, {38, SHIFT, 133}, {40, SHIFT, 22}, },
			{{-1, REDUCE, 13}, {32, REDUCE, 21}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 173}, {0, SHIFT, 83}, {1, SHIFT, 84}, {19, SHIFT, 177}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 175}, {32, SHIFT, 178}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 6}, {32, REDUCE, 15}, },
			{{-1, ERROR, 178}, {15, SHIFT, 6}, {19, SHIFT, 130}, {24, SHIFT, 18}, {30, SHIFT, 131}, {33, SHIFT, 132}, {38, SHIFT, 133}, {40, SHIFT, 22}, },
			{{-1, REDUCE, 18}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 8}, {0, 3}, },
			{{-1, 23}, {4, 9}, {10, 9}, {14, 32}, {96, 134}, {169, 134}, {170, 134}, {178, 134}, },
			{{-1, 135}, {6, 24}, {27, 66}, {98, 140}, {160, 172}, {170, 140}, {178, 172}, },
			{{-1, 136}, {169, 175}, {170, 176}, {178, 179}, },
			{{-1, -1}, },
			{{-1, 45}, {21, 60}, {41, 80}, {58, 99}, {61, 102}, {63, 104}, {64, 105}, {91, 125}, {133, 159}, {141, 163}, {162, 173}, },
			{{-1, 46}, {83, 123}, {84, 124}, },
			{{-1, 47}, {92, 126}, {93, 127}, {94, 128}, },
			{{-1, 48}, },
			{{-1, 49}, {39, 78}, {40, 79}, },
			{{-1, 50}, {20, 57}, {41, 81}, {131, 156}, {132, 157}, },
			{{-1, 51}, {95, 129}, },
			{{-1, 52}, {44, 82}, {97, 139}, },
			{{-1, 53}, },
			{{-1, 54}, },
			{{-1, 91}, },
			{{-1, 10}, {0, 4}, },
			{{-1, 36}, },
			{{-1, 75}, {76, 118}, },
			{{-1, 37}, {74, 117}, },
			{{-1, 38}, {7, 29}, {35, 72}, },
			{{-1, 69}, {70, 111}, },
			{{-1, 30}, {68, 110}, },
			{{-1, 119}, {115, 151}, },
			{{-1, 120}, {67, 108}, {71, 113}, {116, 113}, },
			{{-1, 114}, {116, 152}, },
			{{-1, 109}, },
			{{-1, 154}, },
			{{-1, 148}, {149, 166}, {155, 166}, {168, 166}, },
			{{-1, 11}, {14, 33}, },
			{{-1, 12}, },
			{{-1, 13}, },
			{{-1, 55}, {6, 25}, {27, 25}, {96, 137}, {98, 25}, {160, 25}, {169, 137}, {170, 137}, {178, 137}, },
			{{-1, 103}, },
			{{-1, 142}, {143, 164}, },
			{{-1, 56}, {6, 26}, {27, 26}, {96, 138}, {98, 26}, {160, 26}, {169, 138}, {170, 138}, {178, 138}, },
			{{-1, 14}, },
			{{-1, 27}, },
			{{-1, -1}, },
			{{-1, 76}, },
			{{-1, 70}, },
			{{-1, 149}, {120, 155}, {154, 168}, },
			{{-1, 143}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'fun'",
			"expecting: identifier",
			"expecting: EOF",
			"expecting: '{', 'fun', 'var'",
			"expecting: '('",
			"expecting: '{', '}', ';', const string, 'if', 'while', 'return', identifier",
			"expecting: '{', 'fun', 'var', EOF",
			"expecting: '{', ';', 'fun', 'var'",
			"expecting: ')', 'ref', identifier",
			"expecting: '{', '}', ';', const string, 'if', 'else', 'while', 'fun', 'return', 'var', identifier, EOF",
			"expecting: '+', '-', '*', 'div', 'mod', '<-', '=', '#', '<', '<=', '>', '>=', ')', '[', ']', ';', ',', 'and', 'or', 'then', 'do'",
			"expecting: '+', '-', '(', number, const char, const string, 'not', identifier",
			"expecting: '+', '-', '(', ';', number, const char, const string, identifier",
			"expecting: '+', '-', '*', 'div', 'mod', '<-', '=', '#', '<', '<=', '>', '>=', '(', ')', '[', ']', ';', ',', 'and', 'or', 'then', 'do'",
			"expecting: ';'",
			"expecting: '<-', '['",
			"expecting: ',', ':'",
			"expecting: ':'",
			"expecting: ')'",
			"expecting: ')', ';'",
			"expecting: number, const char, const string, identifier",
			"expecting: '+', '-', '*', 'div', 'mod', '=', '#', '<', '<=', '>', '>=', ')', ']', ';', ',', 'and', 'or', 'then', 'do'",
			"expecting: '+', '-', '=', '#', '<', '<=', '>', '>='",
			"expecting: 'or', 'then'",
			"expecting: ')', 'and', 'or', 'then', 'do'",
			"expecting: '+', '-', '*', 'div', 'mod', '=', '#', '<', '<=', '>', '>=', ')', '[', ']', ';', ',', 'and', 'or', 'then', 'do'",
			"expecting: 'or', 'do'",
			"expecting: '+', '-', '(', number, const char, const string, identifier",
			"expecting: '+', '-', ';'",
			"expecting: '+', '-', '(', ')', number, const char, const string, identifier",
			"expecting: 'char', 'int'",
			"expecting: 'char', 'int', 'nothing'",
			"expecting: 'ref', identifier",
			"expecting: '+', '-', '=', '#', '<', '<=', '>', '>=', ')'",
			"expecting: ')', 'or'",
			"expecting: '{', ';', const string, 'if', 'while', 'return', identifier",
			"expecting: '+', '-', ')'",
			"expecting: '+', '-', ')', ','",
			"expecting: '+', '-', ']'",
			"expecting: ')', '{', '[', ';', 'fun', 'var'",
			"expecting: '[', ';'",
			"expecting: ')', '[', ';'",
			"expecting: '+', '-', ')', 'and', 'or', 'then', 'do'",
			"expecting: '{', '}', ';', const string, 'if', 'else', 'while', 'return', identifier",
			"expecting: 'else'",
			"expecting: ')', ','",
			"expecting: number",
			"expecting: ']', number",
			"expecting: ']'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 3, 4, 5, 1, 3, 6, 7, 3, 3, 3, 3, 8, 9, 5, 10, 11, 11, 12, 13, 5, 5, 14, 15, 5, 16, 17, 16, 3, 6, 3, 17, 1, 18, 19, 17, 20, 20, 11, 21, 21, 11, 22, 21, 21, 21, 21, 23, 24, 24, 24, 24, 21, 25, 26, 27, 5, 28, 29, 5, 27, 27, 9, 5, 30, 1, 16, 16, 31, 17, 17, 32, 19, 19, 30, 21, 21, 33, 34, 24, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 11, 35, 11, 35, 36, 5, 21, 37, 18, 28, 38, 39, 39, 40, 14, 16, 16, 7, 7, 7, 30, 31, 19, 19, 19, 41, 21, 24, 21, 21, 42, 21, 21, 21, 24, 43, 11, 11, 12, 43, 5, 44, 14, 15, 24, 5, 27, 45, 45, 21, 5, 10, 46, 41, 40, 3, 19, 7, 47, 41, 41, 23, 26, 43, 28, 35, 43, 27, 37, 45, 48, 41, 41, 41, 35, 35, 43, 5, 28, 41, 44, 44, 43, 35, 44, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
