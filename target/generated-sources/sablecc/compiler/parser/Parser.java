/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.parser;

import compiler.lexer.*;
import compiler.node.*;
import compiler.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AFuncDefProgram */
		    {
			ArrayList list = new0();
			push(goTo(0), list, false);
		    }
		    break;
                    case 1: /* reduce ACommd */
		    {
			ArrayList list = new1();
			push(goTo(1), list, false);
		    }
		    break;
                    case 2: /* reduce AAblockblock1Block */
		    {
			ArrayList list = new2();
			push(goTo(2), list, false);
		    }
		    break;
                    case 3: /* reduce AAblockblock2Block */
		    {
			ArrayList list = new3();
			push(goTo(2), list, false);
		    }
		    break;
                    case 4: /* reduce ASemiStmt */
		    {
			ArrayList list = new4();
			push(goTo(3), list, false);
		    }
		    break;
                    case 5: /* reduce AAssignmentStmt */
		    {
			ArrayList list = new5();
			push(goTo(3), list, false);
		    }
		    break;
                    case 6: /* reduce ABlockStmt */
		    {
			ArrayList list = new6();
			push(goTo(3), list, false);
		    }
		    break;
                    case 7: /* reduce AFuncCallStmt */
		    {
			ArrayList list = new7();
			push(goTo(3), list, false);
		    }
		    break;
                    case 8: /* reduce AIfStmt */
		    {
			ArrayList list = new8();
			push(goTo(3), list, false);
		    }
		    break;
                    case 9: /* reduce AWhileStmt */
		    {
			ArrayList list = new9();
			push(goTo(3), list, false);
		    }
		    break;
                    case 10: /* reduce AAreturnstmt1Stmt */
		    {
			ArrayList list = new10();
			push(goTo(3), list, false);
		    }
		    break;
                    case 11: /* reduce AAreturnstmt2Stmt */
		    {
			ArrayList list = new11();
			push(goTo(3), list, false);
		    }
		    break;
                    case 12: /* reduce AWithoutElseIfStmt */
		    {
			ArrayList list = new12();
			push(goTo(4), list, false);
		    }
		    break;
                    case 13: /* reduce AWithElseIfStmt */
		    {
			ArrayList list = new13();
			push(goTo(4), list, false);
		    }
		    break;
                    case 14: /* reduce ASemiStmtWithElse */
		    {
			ArrayList list = new14();
			push(goTo(5), list, false);
		    }
		    break;
                    case 15: /* reduce AAssignmentStmtWithElse */
		    {
			ArrayList list = new15();
			push(goTo(5), list, false);
		    }
		    break;
                    case 16: /* reduce ABlockStmtWithElse */
		    {
			ArrayList list = new16();
			push(goTo(5), list, false);
		    }
		    break;
                    case 17: /* reduce AFuncCallStmtWithElse */
		    {
			ArrayList list = new17();
			push(goTo(5), list, false);
		    }
		    break;
                    case 18: /* reduce AIfElseStmtWithElse */
		    {
			ArrayList list = new18();
			push(goTo(5), list, false);
		    }
		    break;
                    case 19: /* reduce AWhileStmtWithElse */
		    {
			ArrayList list = new19();
			push(goTo(5), list, false);
		    }
		    break;
                    case 20: /* reduce AAreturnstmtwithelse1StmtWithElse */
		    {
			ArrayList list = new20();
			push(goTo(5), list, false);
		    }
		    break;
                    case 21: /* reduce AAreturnstmtwithelse2StmtWithElse */
		    {
			ArrayList list = new21();
			push(goTo(5), list, false);
		    }
		    break;
                    case 22: /* reduce AFactorExpr */
		    {
			ArrayList list = new22();
			push(goTo(6), list, false);
		    }
		    break;
                    case 23: /* reduce APlusExpr */
		    {
			ArrayList list = new23();
			push(goTo(6), list, false);
		    }
		    break;
                    case 24: /* reduce AMinusExpr */
		    {
			ArrayList list = new24();
			push(goTo(6), list, false);
		    }
		    break;
                    case 25: /* reduce AExprParFactor */
		    {
			ArrayList list = new25();
			push(goTo(7), list, false);
		    }
		    break;
                    case 26: /* reduce AMultFactor */
		    {
			ArrayList list = new26();
			push(goTo(7), list, false);
		    }
		    break;
                    case 27: /* reduce ADivFactor */
		    {
			ArrayList list = new27();
			push(goTo(7), list, false);
		    }
		    break;
                    case 28: /* reduce AModFactor */
		    {
			ArrayList list = new28();
			push(goTo(7), list, false);
		    }
		    break;
                    case 29: /* reduce ATermExprPar */
		    {
			ArrayList list = new29();
			push(goTo(8), list, false);
		    }
		    break;
                    case 30: /* reduce AParExprPar */
		    {
			ArrayList list = new30();
			push(goTo(8), list, false);
		    }
		    break;
                    case 31: /* reduce ATermTermSign */
		    {
			ArrayList list = new31();
			push(goTo(9), list, false);
		    }
		    break;
                    case 32: /* reduce ASignPlusTermSign */
		    {
			ArrayList list = new32();
			push(goTo(9), list, false);
		    }
		    break;
                    case 33: /* reduce ASignMinusTermSign */
		    {
			ArrayList list = new33();
			push(goTo(9), list, false);
		    }
		    break;
                    case 34: /* reduce AIntConstTerm */
		    {
			ArrayList list = new34();
			push(goTo(10), list, false);
		    }
		    break;
                    case 35: /* reduce ACharConstTerm */
		    {
			ArrayList list = new35();
			push(goTo(10), list, false);
		    }
		    break;
                    case 36: /* reduce ALValueTerm */
		    {
			ArrayList list = new36();
			push(goTo(10), list, false);
		    }
		    break;
                    case 37: /* reduce AFuncCallTerm */
		    {
			ArrayList list = new37();
			push(goTo(10), list, false);
		    }
		    break;
                    case 38: /* reduce ACondCond */
		    {
			ArrayList list = new38();
			push(goTo(11), list, false);
		    }
		    break;
                    case 39: /* reduce ACondOrCond */
		    {
			ArrayList list = new39();
			push(goTo(11), list, false);
		    }
		    break;
                    case 40: /* reduce ACondCondAnd */
		    {
			ArrayList list = new40();
			push(goTo(12), list, false);
		    }
		    break;
                    case 41: /* reduce ACondAndCondAnd */
		    {
			ArrayList list = new41();
			push(goTo(12), list, false);
		    }
		    break;
                    case 42: /* reduce ACondCondNot */
		    {
			ArrayList list = new42();
			push(goTo(13), list, false);
		    }
		    break;
                    case 43: /* reduce ACondNotCondNot */
		    {
			ArrayList list = new43();
			push(goTo(13), list, false);
		    }
		    break;
                    case 44: /* reduce AExprCondPar */
		    {
			ArrayList list = new44();
			push(goTo(14), list, false);
		    }
		    break;
                    case 45: /* reduce ACondCondPar */
		    {
			ArrayList list = new45();
			push(goTo(14), list, false);
		    }
		    break;
                    case 46: /* reduce ACondRelatCondRelat */
		    {
			ArrayList list = new46();
			push(goTo(15), list, false);
		    }
		    break;
                    case 47: /* reduce AEqualRelatOper */
		    {
			ArrayList list = new47();
			push(goTo(16), list, false);
		    }
		    break;
                    case 48: /* reduce ANEqualRelatOper */
		    {
			ArrayList list = new48();
			push(goTo(16), list, false);
		    }
		    break;
                    case 49: /* reduce ALessRelatOper */
		    {
			ArrayList list = new49();
			push(goTo(16), list, false);
		    }
		    break;
                    case 50: /* reduce ALessEqualRelatOper */
		    {
			ArrayList list = new50();
			push(goTo(16), list, false);
		    }
		    break;
                    case 51: /* reduce AGreaterRelatOper */
		    {
			ArrayList list = new51();
			push(goTo(16), list, false);
		    }
		    break;
                    case 52: /* reduce AGreaterEqualRelatOper */
		    {
			ArrayList list = new52();
			push(goTo(16), list, false);
		    }
		    break;
                    case 53: /* reduce AAfunctiondefinition1FunctionDefinition */
		    {
			ArrayList list = new53();
			push(goTo(17), list, false);
		    }
		    break;
                    case 54: /* reduce AAfunctiondefinition2FunctionDefinition */
		    {
			ArrayList list = new54();
			push(goTo(17), list, false);
		    }
		    break;
                    case 55: /* reduce AAheaderheader1Header */
		    {
			ArrayList list = new55();
			push(goTo(18), list, false);
		    }
		    break;
                    case 56: /* reduce AAheaderheader2Header */
		    {
			ArrayList list = new56();
			push(goTo(18), list, false);
		    }
		    break;
                    case 57: /* reduce AAfparfunctionparameters1FunctionParameters */
		    {
			ArrayList list = new57();
			push(goTo(19), list, false);
		    }
		    break;
                    case 58: /* reduce AAfparfunctionparameters2FunctionParameters */
		    {
			ArrayList list = new58();
			push(goTo(19), list, false);
		    }
		    break;
                    case 59: /* reduce ASemiFparSemiFunctionParameters */
		    {
			ArrayList list = new59();
			push(goTo(20), list, false);
		    }
		    break;
                    case 60: /* reduce AAfpardeffparametersdefinition1FparametersDefinition */
		    {
			ArrayList list = new60();
			push(goTo(21), list, false);
		    }
		    break;
                    case 61: /* reduce AAfpardeffparametersdefinition2FparametersDefinition */
		    {
			ArrayList list = new61();
			push(goTo(21), list, false);
		    }
		    break;
                    case 62: /* reduce AAfpardeffparametersdefinition3FparametersDefinition */
		    {
			ArrayList list = new62();
			push(goTo(21), list, false);
		    }
		    break;
                    case 63: /* reduce AAfpardeffparametersdefinition4FparametersDefinition */
		    {
			ArrayList list = new63();
			push(goTo(21), list, false);
		    }
		    break;
                    case 64: /* reduce ACommaIdCommaIdentifier */
		    {
			ArrayList list = new64();
			push(goTo(22), list, false);
		    }
		    break;
                    case 65: /* reduce ADataRetType */
		    {
			ArrayList list = new65();
			push(goTo(23), list, false);
		    }
		    break;
                    case 66: /* reduce ANothRetType */
		    {
			ArrayList list = new66();
			push(goTo(23), list, false);
		    }
		    break;
                    case 67: /* reduce AIntTypeDataType */
		    {
			ArrayList list = new67();
			push(goTo(24), list, false);
		    }
		    break;
                    case 68: /* reduce ACharTypeDataType */
		    {
			ArrayList list = new68();
			push(goTo(24), list, false);
		    }
		    break;
                    case 69: /* reduce AAtypetype1Type */
		    {
			ArrayList list = new69();
			push(goTo(25), list, false);
		    }
		    break;
                    case 70: /* reduce AAtypetype2Type */
		    {
			ArrayList list = new70();
			push(goTo(25), list, false);
		    }
		    break;
                    case 71: /* reduce AAtypefpartype1FparType */
		    {
			ArrayList list = new71();
			push(goTo(26), list, false);
		    }
		    break;
                    case 72: /* reduce AAtypefpartype2FparType */
		    {
			ArrayList list = new72();
			push(goTo(26), list, false);
		    }
		    break;
                    case 73: /* reduce AAtypefpartype3FparType */
		    {
			ArrayList list = new73();
			push(goTo(26), list, false);
		    }
		    break;
                    case 74: /* reduce AAtypefpartype4FparType */
		    {
			ArrayList list = new74();
			push(goTo(26), list, false);
		    }
		    break;
                    case 75: /* reduce AArrayTypeConstIntBrackets */
		    {
			ArrayList list = new75();
			push(goTo(27), list, false);
		    }
		    break;
                    case 76: /* reduce AEmptyEmptyBrackets */
		    {
			ArrayList list = new76();
			push(goTo(28), list, false);
		    }
		    break;
                    case 77: /* reduce AFuncDefLocalDefinition */
		    {
			ArrayList list = new77();
			push(goTo(29), list, false);
		    }
		    break;
                    case 78: /* reduce AFuncDeclLocalDefinition */
		    {
			ArrayList list = new78();
			push(goTo(29), list, false);
		    }
		    break;
                    case 79: /* reduce AVarDefLocalDefinition */
		    {
			ArrayList list = new79();
			push(goTo(29), list, false);
		    }
		    break;
                    case 80: /* reduce AAvarvariabledefinition1VariableDefinition */
		    {
			ArrayList list = new80();
			push(goTo(30), list, false);
		    }
		    break;
                    case 81: /* reduce AAvarvariabledefinition2VariableDefinition */
		    {
			ArrayList list = new81();
			push(goTo(30), list, false);
		    }
		    break;
                    case 82: /* reduce AFuncDeclFunctionDeclaration */
		    {
			ArrayList list = new82();
			push(goTo(31), list, false);
		    }
		    break;
                    case 83: /* reduce AAfunccallfunccall1FuncCall */
		    {
			ArrayList list = new83();
			push(goTo(32), list, false);
		    }
		    break;
                    case 84: /* reduce AAfunccallfunccall2FuncCall */
		    {
			ArrayList list = new84();
			push(goTo(32), list, false);
		    }
		    break;
                    case 85: /* reduce AAexprcommaexprfunccallexpr1FuncCallExpr */
		    {
			ArrayList list = new85();
			push(goTo(33), list, false);
		    }
		    break;
                    case 86: /* reduce AAexprcommaexprfunccallexpr2FuncCallExpr */
		    {
			ArrayList list = new86();
			push(goTo(33), list, false);
		    }
		    break;
                    case 87: /* reduce ACommaExprCommaExpr */
		    {
			ArrayList list = new87();
			push(goTo(34), list, false);
		    }
		    break;
                    case 88: /* reduce AIdLValue */
		    {
			ArrayList list = new88();
			push(goTo(35), list, false);
		    }
		    break;
                    case 89: /* reduce AStringLiteralLValue */
		    {
			ArrayList list = new89();
			push(goTo(35), list, false);
		    }
		    break;
                    case 90: /* reduce ALValueLValue */
		    {
			ArrayList list = new90();
			push(goTo(35), list, false);
		    }
		    break;
                    case 91: /* reduce ATerminal$Stmt */
		    {
			ArrayList list = new91();
			push(goTo(36), list, true);
		    }
		    break;
                    case 92: /* reduce ANonTerminal$Stmt */
		    {
			ArrayList list = new92();
			push(goTo(36), list, true);
		    }
		    break;
                    case 93: /* reduce ATerminal$LocalDefinition */
		    {
			ArrayList list = new93();
			push(goTo(37), list, true);
		    }
		    break;
                    case 94: /* reduce ANonTerminal$LocalDefinition */
		    {
			ArrayList list = new94();
			push(goTo(37), list, true);
		    }
		    break;
                    case 95: /* reduce ATerminal$SemiFunctionParameters */
		    {
			ArrayList list = new95();
			push(goTo(38), list, true);
		    }
		    break;
                    case 96: /* reduce ANonTerminal$SemiFunctionParameters */
		    {
			ArrayList list = new96();
			push(goTo(38), list, true);
		    }
		    break;
                    case 97: /* reduce ATerminal$CommaIdentifier */
		    {
			ArrayList list = new97();
			push(goTo(39), list, true);
		    }
		    break;
                    case 98: /* reduce ANonTerminal$CommaIdentifier */
		    {
			ArrayList list = new98();
			push(goTo(39), list, true);
		    }
		    break;
                    case 99: /* reduce ATerminal$ConstIntBrackets */
		    {
			ArrayList list = new99();
			push(goTo(40), list, true);
		    }
		    break;
                    case 100: /* reduce ANonTerminal$ConstIntBrackets */
		    {
			ArrayList list = new100();
			push(goTo(40), list, true);
		    }
		    break;
                    case 101: /* reduce ATerminal$CommaExpr */
		    {
			ArrayList list = new101();
			push(goTo(41), list, true);
		    }
		    break;
                    case 102: /* reduce ANonTerminal$CommaExpr */
		    {
			ArrayList list = new102();
			push(goTo(41), list, true);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AFuncDefProgram */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PFunctionDefinition pfunctiondefinitionNode2;
        pfunctiondefinitionNode2 = (PFunctionDefinition)nodeArrayList1.get(0);

        pprogramNode1 = new AFuncDefProgram(pfunctiondefinitionNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce ACommd */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCommd pcommdNode1;
        {
            // Block
        PStmt pstmtNode2;
        pstmtNode2 = (PStmt)nodeArrayList1.get(0);

        pcommdNode1 = new ACommd(pstmtNode2);
        }
	nodeList.add(pcommdNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AAblockblock1Block */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TLBrc tlbrcNode2;
        LinkedList listNode3 = new LinkedList();
        TRBrc trbrcNode4;
        tlbrcNode2 = (TLBrc)nodeArrayList1.get(0);
        {
            // Block
        }
        trbrcNode4 = (TRBrc)nodeArrayList2.get(0);

        pblockNode1 = new ABlockBlock(tlbrcNode2, listNode3, trbrcNode4);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AAblockblock2Block */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TLBrc tlbrcNode2;
        LinkedList listNode4 = new LinkedList();
        TRBrc trbrcNode5;
        tlbrcNode2 = (TLBrc)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        trbrcNode5 = (TRBrc)nodeArrayList3.get(0);

        pblockNode1 = new ABlockBlock(tlbrcNode2, listNode4, trbrcNode5);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce ASemiStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TSemi tsemiNode2;
        tsemiNode2 = (TSemi)nodeArrayList1.get(0);

        pstmtNode1 = new ASemiStmt(tsemiNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce AAssignmentStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PLValue plvalueNode2;
        TAssign tassignNode3;
        PExpr pexprNode4;
        TSemi tsemiNode5;
        plvalueNode2 = (PLValue)nodeArrayList1.get(0);
        tassignNode3 = (TAssign)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        tsemiNode5 = (TSemi)nodeArrayList4.get(0);

        pstmtNode1 = new AAssignmentStmt(plvalueNode2, tassignNode3, pexprNode4, tsemiNode5);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce ABlockStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PBlock pblockNode2;
        pblockNode2 = (PBlock)nodeArrayList1.get(0);

        pstmtNode1 = new ABlockStmt(pblockNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AFuncCallStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PFuncCall pfunccallNode2;
        TSemi tsemiNode3;
        pfunccallNode2 = (PFuncCall)nodeArrayList1.get(0);
        tsemiNode3 = (TSemi)nodeArrayList2.get(0);

        pstmtNode1 = new AFuncCallStmt(pfunccallNode2, tsemiNode3);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AIfStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PIfStmt pifstmtNode2;
        pifstmtNode2 = (PIfStmt)nodeArrayList1.get(0);

        pstmtNode1 = new AIfStmt(pifstmtNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AWhileStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TWhile twhileNode2;
        PCond pcondNode3;
        TDo tdoNode4;
        PStmt pstmtNode5;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        pcondNode3 = (PCond)nodeArrayList2.get(0);
        tdoNode4 = (TDo)nodeArrayList3.get(0);
        pstmtNode5 = (PStmt)nodeArrayList4.get(0);

        pstmtNode1 = new AWhileStmt(twhileNode2, pcondNode3, tdoNode4, pstmtNode5);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AAreturnstmt1Stmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TReturn treturnNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TSemi tsemiNode4;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        tsemiNode4 = (TSemi)nodeArrayList2.get(0);

        pstmtNode1 = new AReturnStmt(treturnNode2, null, tsemiNode4);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AAreturnstmt2Stmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TReturn treturnNode2;
        PExpr pexprNode3;
        TSemi tsemiNode4;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tsemiNode4 = (TSemi)nodeArrayList3.get(0);

        pstmtNode1 = new AReturnStmt(treturnNode2, pexprNode3, tsemiNode4);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AWithoutElseIfStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIfStmt pifstmtNode1;
        {
            // Block
        TIf tifNode2;
        PCond pcondNode3;
        TThen tthenNode4;
        PStmt pstmtNode5;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pcondNode3 = (PCond)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        pstmtNode5 = (PStmt)nodeArrayList4.get(0);

        pifstmtNode1 = new AWithoutElseIfStmt(tifNode2, pcondNode3, tthenNode4, pstmtNode5);
        }
	nodeList.add(pifstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AWithElseIfStmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIfStmt pifstmtNode1;
        {
            // Block
        TIf tifNode2;
        PCond pcondNode3;
        TThen tthenNode4;
        PStmtWithElse pstmtwithelseNode5;
        TElse telseNode6;
        PStmt pstmtNode7;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pcondNode3 = (PCond)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        pstmtwithelseNode5 = (PStmtWithElse)nodeArrayList4.get(0);
        telseNode6 = (TElse)nodeArrayList5.get(0);
        pstmtNode7 = (PStmt)nodeArrayList6.get(0);

        pifstmtNode1 = new AWithElseIfStmt(tifNode2, pcondNode3, tthenNode4, pstmtwithelseNode5, telseNode6, pstmtNode7);
        }
	nodeList.add(pifstmtNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce ASemiStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmtWithElse pstmtwithelseNode1;
        {
            // Block
        TSemi tsemiNode2;
        tsemiNode2 = (TSemi)nodeArrayList1.get(0);

        pstmtwithelseNode1 = new ASemiStmtWithElse(tsemiNode2);
        }
	nodeList.add(pstmtwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce AAssignmentStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmtWithElse pstmtwithelseNode1;
        {
            // Block
        PLValue plvalueNode2;
        TAssign tassignNode3;
        PExpr pexprNode4;
        TSemi tsemiNode5;
        plvalueNode2 = (PLValue)nodeArrayList1.get(0);
        tassignNode3 = (TAssign)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        tsemiNode5 = (TSemi)nodeArrayList4.get(0);

        pstmtwithelseNode1 = new AAssignmentStmtWithElse(plvalueNode2, tassignNode3, pexprNode4, tsemiNode5);
        }
	nodeList.add(pstmtwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce ABlockStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmtWithElse pstmtwithelseNode1;
        {
            // Block
        PBlock pblockNode2;
        pblockNode2 = (PBlock)nodeArrayList1.get(0);

        pstmtwithelseNode1 = new ABlockStmtWithElse(pblockNode2);
        }
	nodeList.add(pstmtwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AFuncCallStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmtWithElse pstmtwithelseNode1;
        {
            // Block
        PFuncCall pfunccallNode2;
        TSemi tsemiNode3;
        pfunccallNode2 = (PFuncCall)nodeArrayList1.get(0);
        tsemiNode3 = (TSemi)nodeArrayList2.get(0);

        pstmtwithelseNode1 = new AFuncCallStmtWithElse(pfunccallNode2, tsemiNode3);
        }
	nodeList.add(pstmtwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce AIfElseStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmtWithElse pstmtwithelseNode1;
        {
            // Block
        TIf tifNode2;
        PCond pcondNode3;
        TThen tthenNode4;
        PStmtWithElse pstmtwithelseNode5;
        TElse telseNode6;
        PStmtWithElse pstmtwithelseNode7;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pcondNode3 = (PCond)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        pstmtwithelseNode5 = (PStmtWithElse)nodeArrayList4.get(0);
        telseNode6 = (TElse)nodeArrayList5.get(0);
        pstmtwithelseNode7 = (PStmtWithElse)nodeArrayList6.get(0);

        pstmtwithelseNode1 = new AIfElseStmtWithElse(tifNode2, pcondNode3, tthenNode4, pstmtwithelseNode5, telseNode6, pstmtwithelseNode7);
        }
	nodeList.add(pstmtwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce AWhileStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmtWithElse pstmtwithelseNode1;
        {
            // Block
        TWhile twhileNode2;
        PCond pcondNode3;
        TDo tdoNode4;
        PStmtWithElse pstmtwithelseNode5;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        pcondNode3 = (PCond)nodeArrayList2.get(0);
        tdoNode4 = (TDo)nodeArrayList3.get(0);
        pstmtwithelseNode5 = (PStmtWithElse)nodeArrayList4.get(0);

        pstmtwithelseNode1 = new AWhileStmtWithElse(twhileNode2, pcondNode3, tdoNode4, pstmtwithelseNode5);
        }
	nodeList.add(pstmtwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce AAreturnstmtwithelse1StmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmtWithElse pstmtwithelseNode1;
        {
            // Block
        TReturn treturnNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TSemi tsemiNode4;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        tsemiNode4 = (TSemi)nodeArrayList2.get(0);

        pstmtwithelseNode1 = new AReturnStmtWithElse(treturnNode2, null, tsemiNode4);
        }
	nodeList.add(pstmtwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AAreturnstmtwithelse2StmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStmtWithElse pstmtwithelseNode1;
        {
            // Block
        TReturn treturnNode2;
        PExpr pexprNode3;
        TSemi tsemiNode4;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tsemiNode4 = (TSemi)nodeArrayList3.get(0);

        pstmtwithelseNode1 = new AReturnStmtWithElse(treturnNode2, pexprNode3, tsemiNode4);
        }
	nodeList.add(pstmtwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce AFactorExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PFactor pfactorNode2;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);

        pexprNode1 = new AFactorExpr(pfactorNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce APlusExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TPlus tplusNode3;
        PFactor pfactorNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        pexprNode1 = new APlusExpr(pexprNode2, tplusNode3, pfactorNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce AMinusExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TMinus tminusNode3;
        PFactor pfactorNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        pexprNode1 = new AMinusExpr(pexprNode2, tminusNode3, pfactorNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce AExprParFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PExprPar pexprparNode2;
        pexprparNode2 = (PExprPar)nodeArrayList1.get(0);

        pfactorNode1 = new AExprParFactor(pexprparNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce AMultFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFactor pfactorNode2;
        TMult tmultNode3;
        PExprPar pexprparNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        pexprparNode4 = (PExprPar)nodeArrayList3.get(0);

        pfactorNode1 = new AMultFactor(pfactorNode2, tmultNode3, pexprparNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce ADivFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFactor pfactorNode2;
        TDiv tdivNode3;
        PExprPar pexprparNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        pexprparNode4 = (PExprPar)nodeArrayList3.get(0);

        pfactorNode1 = new ADivFactor(pfactorNode2, tdivNode3, pexprparNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce AModFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFactor pfactorNode2;
        TMod tmodNode3;
        PExprPar pexprparNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        tmodNode3 = (TMod)nodeArrayList2.get(0);
        pexprparNode4 = (PExprPar)nodeArrayList3.get(0);

        pfactorNode1 = new AModFactor(pfactorNode2, tmodNode3, pexprparNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce ATermExprPar */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExprPar pexprparNode1;
        {
            // Block
        PTermSign ptermsignNode2;
        ptermsignNode2 = (PTermSign)nodeArrayList1.get(0);

        pexprparNode1 = new ATermExprPar(ptermsignNode2);
        }
	nodeList.add(pexprparNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce AParExprPar */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExprPar pexprparNode1;
        {
            // Block
        TLPar tlparNode2;
        PExpr pexprNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pexprparNode1 = new AParExprPar(tlparNode2, pexprNode3, trparNode4);
        }
	nodeList.add(pexprparNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce ATermTermSign */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTermSign ptermsignNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        ptermsignNode1 = new ATermTermSign(ptermNode2);
        }
	nodeList.add(ptermsignNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce ASignPlusTermSign */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTermSign ptermsignNode1;
        {
            // Block
        TPlus tplusNode2;
        PTerm ptermNode3;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);
        ptermNode3 = (PTerm)nodeArrayList2.get(0);

        ptermsignNode1 = new ASignPlusTermSign(tplusNode2, ptermNode3);
        }
	nodeList.add(ptermsignNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce ASignMinusTermSign */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTermSign ptermsignNode1;
        {
            // Block
        TMinus tminusNode2;
        PTerm ptermNode3;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);
        ptermNode3 = (PTerm)nodeArrayList2.get(0);

        ptermsignNode1 = new ASignMinusTermSign(tminusNode2, ptermNode3);
        }
	nodeList.add(ptermsignNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce AIntConstTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        ptermNode1 = new AIntConstTerm(tnumberNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce ACharConstTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TConstChar tconstcharNode2;
        tconstcharNode2 = (TConstChar)nodeArrayList1.get(0);

        ptermNode1 = new ACharConstTerm(tconstcharNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce ALValueTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PLValue plvalueNode2;
        plvalueNode2 = (PLValue)nodeArrayList1.get(0);

        ptermNode1 = new ALValueTerm(plvalueNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce AFuncCallTerm */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PFuncCall pfunccallNode2;
        pfunccallNode2 = (PFuncCall)nodeArrayList1.get(0);

        ptermNode1 = new AFuncCallTerm(pfunccallNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce ACondCond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        {
            // Block
        PCondAnd pcondandNode2;
        pcondandNode2 = (PCondAnd)nodeArrayList1.get(0);

        pcondNode1 = new ACondCond(pcondandNode2);
        }
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce ACondOrCond */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCond pcondNode1;
        {
            // Block
        PCond pcondNode2;
        TOr torNode3;
        PCondAnd pcondandNode4;
        pcondNode2 = (PCond)nodeArrayList1.get(0);
        torNode3 = (TOr)nodeArrayList2.get(0);
        pcondandNode4 = (PCondAnd)nodeArrayList3.get(0);

        pcondNode1 = new ACondOrCond(pcondNode2, torNode3, pcondandNode4);
        }
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new40() /* reduce ACondCondAnd */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCondAnd pcondandNode1;
        {
            // Block
        PCondNot pcondnotNode2;
        pcondnotNode2 = (PCondNot)nodeArrayList1.get(0);

        pcondandNode1 = new ACondCondAnd(pcondnotNode2);
        }
	nodeList.add(pcondandNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new41() /* reduce ACondAndCondAnd */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCondAnd pcondandNode1;
        {
            // Block
        PCondAnd pcondandNode2;
        TAnd tandNode3;
        PCondNot pcondnotNode4;
        pcondandNode2 = (PCondAnd)nodeArrayList1.get(0);
        tandNode3 = (TAnd)nodeArrayList2.get(0);
        pcondnotNode4 = (PCondNot)nodeArrayList3.get(0);

        pcondandNode1 = new ACondAndCondAnd(pcondandNode2, tandNode3, pcondnotNode4);
        }
	nodeList.add(pcondandNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new42() /* reduce ACondCondNot */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCondNot pcondnotNode1;
        {
            // Block
        PCondPar pcondparNode2;
        pcondparNode2 = (PCondPar)nodeArrayList1.get(0);

        pcondnotNode1 = new ACondCondNot(pcondparNode2);
        }
	nodeList.add(pcondnotNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new43() /* reduce ACondNotCondNot */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCondNot pcondnotNode1;
        {
            // Block
        TNot tnotNode2;
        PCondNot pcondnotNode3;
        tnotNode2 = (TNot)nodeArrayList1.get(0);
        pcondnotNode3 = (PCondNot)nodeArrayList2.get(0);

        pcondnotNode1 = new ACondNotCondNot(tnotNode2, pcondnotNode3);
        }
	nodeList.add(pcondnotNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new44() /* reduce AExprCondPar */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCondPar pcondparNode1;
        {
            // Block
        PCondRelat pcondrelatNode2;
        pcondrelatNode2 = (PCondRelat)nodeArrayList1.get(0);

        pcondparNode1 = new AExprCondPar(pcondrelatNode2);
        }
	nodeList.add(pcondparNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new45() /* reduce ACondCondPar */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCondPar pcondparNode1;
        {
            // Block
        TLPar tlparNode2;
        PCond pcondNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pcondNode3 = (PCond)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pcondparNode1 = new ACondCondPar(tlparNode2, pcondNode3, trparNode4);
        }
	nodeList.add(pcondparNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new46() /* reduce ACondRelatCondRelat */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCondRelat pcondrelatNode1;
        {
            // Block
        PExpr pexprNode2;
        PRelatOper prelatoperNode3;
        PExpr pexprNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        prelatoperNode3 = (PRelatOper)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pcondrelatNode1 = new ACondRelatCondRelat(pexprNode2, prelatoperNode3, pexprNode4);
        }
	nodeList.add(pcondrelatNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new47() /* reduce AEqualRelatOper */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRelatOper prelatoperNode1;
        {
            // Block
        TEqual tequalNode2;
        tequalNode2 = (TEqual)nodeArrayList1.get(0);

        prelatoperNode1 = new AEqualRelatOper(tequalNode2);
        }
	nodeList.add(prelatoperNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new48() /* reduce ANEqualRelatOper */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRelatOper prelatoperNode1;
        {
            // Block
        TNEqual tnequalNode2;
        tnequalNode2 = (TNEqual)nodeArrayList1.get(0);

        prelatoperNode1 = new ANEqualRelatOper(tnequalNode2);
        }
	nodeList.add(prelatoperNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new49() /* reduce ALessRelatOper */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRelatOper prelatoperNode1;
        {
            // Block
        TLess tlessNode2;
        tlessNode2 = (TLess)nodeArrayList1.get(0);

        prelatoperNode1 = new ALessRelatOper(tlessNode2);
        }
	nodeList.add(prelatoperNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new50() /* reduce ALessEqualRelatOper */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRelatOper prelatoperNode1;
        {
            // Block
        TLessEqual tlessequalNode2;
        tlessequalNode2 = (TLessEqual)nodeArrayList1.get(0);

        prelatoperNode1 = new ALessEqualRelatOper(tlessequalNode2);
        }
	nodeList.add(prelatoperNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new51() /* reduce AGreaterRelatOper */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRelatOper prelatoperNode1;
        {
            // Block
        TGreater tgreaterNode2;
        tgreaterNode2 = (TGreater)nodeArrayList1.get(0);

        prelatoperNode1 = new AGreaterRelatOper(tgreaterNode2);
        }
	nodeList.add(prelatoperNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new52() /* reduce AGreaterEqualRelatOper */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRelatOper prelatoperNode1;
        {
            // Block
        TGreaterEqual tgreaterequalNode2;
        tgreaterequalNode2 = (TGreaterEqual)nodeArrayList1.get(0);

        prelatoperNode1 = new AGreaterEqualRelatOper(tgreaterequalNode2);
        }
	nodeList.add(prelatoperNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new53() /* reduce AAfunctiondefinition1FunctionDefinition */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFunctionDefinition pfunctiondefinitionNode1;
        {
            // Block
        PHeader pheaderNode2;
        LinkedList listNode3 = new LinkedList();
        PBlock pblockNode4;
        pheaderNode2 = (PHeader)nodeArrayList1.get(0);
        {
            // Block
        }
        pblockNode4 = (PBlock)nodeArrayList2.get(0);

        pfunctiondefinitionNode1 = new AFunctionDefinition(pheaderNode2, listNode3, pblockNode4);
        }
	nodeList.add(pfunctiondefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new54() /* reduce AAfunctiondefinition2FunctionDefinition */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFunctionDefinition pfunctiondefinitionNode1;
        {
            // Block
        PHeader pheaderNode2;
        LinkedList listNode4 = new LinkedList();
        PBlock pblockNode5;
        pheaderNode2 = (PHeader)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pblockNode5 = (PBlock)nodeArrayList3.get(0);

        pfunctiondefinitionNode1 = new AFunctionDefinition(pheaderNode2, listNode4, pblockNode5);
        }
	nodeList.add(pfunctiondefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new55() /* reduce AAheaderheader1Header */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PHeader pheaderNode1;
        {
            // Block
        TFunction tfunctionNode2;
        TIdentifier tidentifierNode3;
        TLPar tlparNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRPar trparNode6;
        TColon tcolonNode7;
        PRetType prettypeNode8;
        tfunctionNode2 = (TFunction)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        trparNode6 = (TRPar)nodeArrayList4.get(0);
        tcolonNode7 = (TColon)nodeArrayList5.get(0);
        prettypeNode8 = (PRetType)nodeArrayList6.get(0);

        pheaderNode1 = new AHeaderHeader(tfunctionNode2, tidentifierNode3, tlparNode4, null, trparNode6, tcolonNode7, prettypeNode8);
        }
	nodeList.add(pheaderNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new56() /* reduce AAheaderheader2Header */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PHeader pheaderNode1;
        {
            // Block
        TFunction tfunctionNode2;
        TIdentifier tidentifierNode3;
        TLPar tlparNode4;
        PFunctionParameters pfunctionparametersNode5;
        TRPar trparNode6;
        TColon tcolonNode7;
        PRetType prettypeNode8;
        tfunctionNode2 = (TFunction)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pfunctionparametersNode5 = (PFunctionParameters)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tcolonNode7 = (TColon)nodeArrayList6.get(0);
        prettypeNode8 = (PRetType)nodeArrayList7.get(0);

        pheaderNode1 = new AHeaderHeader(tfunctionNode2, tidentifierNode3, tlparNode4, pfunctionparametersNode5, trparNode6, tcolonNode7, prettypeNode8);
        }
	nodeList.add(pheaderNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new57() /* reduce AAfparfunctionparameters1FunctionParameters */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFunctionParameters pfunctionparametersNode1;
        {
            // Block
        PFparametersDefinition pfparametersdefinitionNode2;
        LinkedList listNode3 = new LinkedList();
        pfparametersdefinitionNode2 = (PFparametersDefinition)nodeArrayList1.get(0);
        {
            // Block
        }

        pfunctionparametersNode1 = new AFparFunctionParameters(pfparametersdefinitionNode2, listNode3);
        }
	nodeList.add(pfunctionparametersNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new58() /* reduce AAfparfunctionparameters2FunctionParameters */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFunctionParameters pfunctionparametersNode1;
        {
            // Block
        PFparametersDefinition pfparametersdefinitionNode2;
        LinkedList listNode4 = new LinkedList();
        pfparametersdefinitionNode2 = (PFparametersDefinition)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pfunctionparametersNode1 = new AFparFunctionParameters(pfparametersdefinitionNode2, listNode4);
        }
	nodeList.add(pfunctionparametersNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new59() /* reduce ASemiFparSemiFunctionParameters */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSemiFunctionParameters psemifunctionparametersNode1;
        {
            // Block
        TSemi tsemiNode2;
        PFparametersDefinition pfparametersdefinitionNode3;
        tsemiNode2 = (TSemi)nodeArrayList1.get(0);
        pfparametersdefinitionNode3 = (PFparametersDefinition)nodeArrayList2.get(0);

        psemifunctionparametersNode1 = new ASemiFparSemiFunctionParameters(tsemiNode2, pfparametersdefinitionNode3);
        }
	nodeList.add(psemifunctionparametersNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new60() /* reduce AAfpardeffparametersdefinition1FparametersDefinition */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparametersDefinition pfparametersdefinitionNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        LinkedList listNode4 = new LinkedList();
        TColon tcolonNode5;
        PFparType pfpartypeNode6;
        tidentifierNode3 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }
        tcolonNode5 = (TColon)nodeArrayList2.get(0);
        pfpartypeNode6 = (PFparType)nodeArrayList3.get(0);

        pfparametersdefinitionNode1 = new AFparDefFparametersDefinition(null, tidentifierNode3, listNode4, tcolonNode5, pfpartypeNode6);
        }
	nodeList.add(pfparametersdefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new61() /* reduce AAfpardeffparametersdefinition2FparametersDefinition */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparametersDefinition pfparametersdefinitionNode1;
        {
            // Block
        TReference treferenceNode2;
        TIdentifier tidentifierNode3;
        LinkedList listNode4 = new LinkedList();
        TColon tcolonNode5;
        PFparType pfpartypeNode6;
        treferenceNode2 = (TReference)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        }
        tcolonNode5 = (TColon)nodeArrayList3.get(0);
        pfpartypeNode6 = (PFparType)nodeArrayList4.get(0);

        pfparametersdefinitionNode1 = new AFparDefFparametersDefinition(treferenceNode2, tidentifierNode3, listNode4, tcolonNode5, pfpartypeNode6);
        }
	nodeList.add(pfparametersdefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new62() /* reduce AAfpardeffparametersdefinition3FparametersDefinition */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparametersDefinition pfparametersdefinitionNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        LinkedList listNode5 = new LinkedList();
        TColon tcolonNode6;
        PFparType pfpartypeNode7;
        tidentifierNode3 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        tcolonNode6 = (TColon)nodeArrayList3.get(0);
        pfpartypeNode7 = (PFparType)nodeArrayList4.get(0);

        pfparametersdefinitionNode1 = new AFparDefFparametersDefinition(null, tidentifierNode3, listNode5, tcolonNode6, pfpartypeNode7);
        }
	nodeList.add(pfparametersdefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new63() /* reduce AAfpardeffparametersdefinition4FparametersDefinition */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparametersDefinition pfparametersdefinitionNode1;
        {
            // Block
        TReference treferenceNode2;
        TIdentifier tidentifierNode3;
        LinkedList listNode5 = new LinkedList();
        TColon tcolonNode6;
        PFparType pfpartypeNode7;
        treferenceNode2 = (TReference)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        tcolonNode6 = (TColon)nodeArrayList4.get(0);
        pfpartypeNode7 = (PFparType)nodeArrayList5.get(0);

        pfparametersdefinitionNode1 = new AFparDefFparametersDefinition(treferenceNode2, tidentifierNode3, listNode5, tcolonNode6, pfpartypeNode7);
        }
	nodeList.add(pfparametersdefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new64() /* reduce ACommaIdCommaIdentifier */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCommaIdentifier pcommaidentifierNode1;
        {
            // Block
        TComma tcommaNode2;
        TIdentifier tidentifierNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pcommaidentifierNode1 = new ACommaIdCommaIdentifier(tcommaNode2, tidentifierNode3);
        }
	nodeList.add(pcommaidentifierNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new65() /* reduce ADataRetType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRetType prettypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);

        prettypeNode1 = new ADataRetType(pdatatypeNode2);
        }
	nodeList.add(prettypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new66() /* reduce ANothRetType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRetType prettypeNode1;
        {
            // Block
        TNothing tnothingNode2;
        tnothingNode2 = (TNothing)nodeArrayList1.get(0);

        prettypeNode1 = new ANothRetType(tnothingNode2);
        }
	nodeList.add(prettypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new67() /* reduce AIntTypeDataType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDataType pdatatypeNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        pdatatypeNode1 = new AIntTypeDataType(tintNode2);
        }
	nodeList.add(pdatatypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new68() /* reduce ACharTypeDataType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDataType pdatatypeNode1;
        {
            // Block
        TChar tcharNode2;
        tcharNode2 = (TChar)nodeArrayList1.get(0);

        pdatatypeNode1 = new ACharTypeDataType(tcharNode2);
        }
	nodeList.add(pdatatypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new69() /* reduce AAtypetype1Type */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        LinkedList listNode3 = new LinkedList();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        {
            // Block
        }

        ptypeNode1 = new ATypeType(pdatatypeNode2, listNode3);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new70() /* reduce AAtypetype2Type */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        LinkedList listNode4 = new LinkedList();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        ptypeNode1 = new ATypeType(pdatatypeNode2, listNode4);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new71() /* reduce AAtypefpartype1FparType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparType pfpartypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList listNode4 = new LinkedList();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        {
            // Block
        }

        pfpartypeNode1 = new ATypeFparType(pdatatypeNode2, null, listNode4);
        }
	nodeList.add(pfpartypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new72() /* reduce AAtypefpartype2FparType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparType pfpartypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        PEmptyBrackets pemptybracketsNode3;
        LinkedList listNode4 = new LinkedList();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        pemptybracketsNode3 = (PEmptyBrackets)nodeArrayList2.get(0);
        {
            // Block
        }

        pfpartypeNode1 = new ATypeFparType(pdatatypeNode2, pemptybracketsNode3, listNode4);
        }
	nodeList.add(pfpartypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new73() /* reduce AAtypefpartype3FparType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparType pfpartypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList listNode5 = new LinkedList();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pfpartypeNode1 = new ATypeFparType(pdatatypeNode2, null, listNode5);
        }
	nodeList.add(pfpartypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new74() /* reduce AAtypefpartype4FparType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFparType pfpartypeNode1;
        {
            // Block
        PDataType pdatatypeNode2;
        PEmptyBrackets pemptybracketsNode3;
        LinkedList listNode5 = new LinkedList();
        pdatatypeNode2 = (PDataType)nodeArrayList1.get(0);
        pemptybracketsNode3 = (PEmptyBrackets)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pfpartypeNode1 = new ATypeFparType(pdatatypeNode2, pemptybracketsNode3, listNode5);
        }
	nodeList.add(pfpartypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new75() /* reduce AArrayTypeConstIntBrackets */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PConstIntBrackets pconstintbracketsNode1;
        {
            // Block
        TLBkt tlbktNode2;
        TNumber tnumberNode3;
        TRBkt trbktNode4;
        tlbktNode2 = (TLBkt)nodeArrayList1.get(0);
        tnumberNode3 = (TNumber)nodeArrayList2.get(0);
        trbktNode4 = (TRBkt)nodeArrayList3.get(0);

        pconstintbracketsNode1 = new AArrayTypeConstIntBrackets(tlbktNode2, tnumberNode3, trbktNode4);
        }
	nodeList.add(pconstintbracketsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new76() /* reduce AEmptyEmptyBrackets */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PEmptyBrackets pemptybracketsNode1;
        {
            // Block
        TLBkt tlbktNode2;
        TRBkt trbktNode3;
        tlbktNode2 = (TLBkt)nodeArrayList1.get(0);
        trbktNode3 = (TRBkt)nodeArrayList2.get(0);

        pemptybracketsNode1 = new AEmptyEmptyBrackets(tlbktNode2, trbktNode3);
        }
	nodeList.add(pemptybracketsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new77() /* reduce AFuncDefLocalDefinition */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLocalDefinition plocaldefinitionNode1;
        {
            // Block
        PFunctionDefinition pfunctiondefinitionNode2;
        pfunctiondefinitionNode2 = (PFunctionDefinition)nodeArrayList1.get(0);

        plocaldefinitionNode1 = new AFuncDefLocalDefinition(pfunctiondefinitionNode2);
        }
	nodeList.add(plocaldefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new78() /* reduce AFuncDeclLocalDefinition */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLocalDefinition plocaldefinitionNode1;
        {
            // Block
        PFunctionDeclaration pfunctiondeclarationNode2;
        pfunctiondeclarationNode2 = (PFunctionDeclaration)nodeArrayList1.get(0);

        plocaldefinitionNode1 = new AFuncDeclLocalDefinition(pfunctiondeclarationNode2);
        }
	nodeList.add(plocaldefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new79() /* reduce AVarDefLocalDefinition */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLocalDefinition plocaldefinitionNode1;
        {
            // Block
        PVariableDefinition pvariabledefinitionNode2;
        pvariabledefinitionNode2 = (PVariableDefinition)nodeArrayList1.get(0);

        plocaldefinitionNode1 = new AVarDefLocalDefinition(pvariabledefinitionNode2);
        }
	nodeList.add(plocaldefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new80() /* reduce AAvarvariabledefinition1VariableDefinition */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVariableDefinition pvariabledefinitionNode1;
        {
            // Block
        TVariable tvariableNode2;
        TIdentifier tidentifierNode3;
        LinkedList listNode4 = new LinkedList();
        TColon tcolonNode5;
        PType ptypeNode6;
        TSemi tsemiNode7;
        tvariableNode2 = (TVariable)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        }
        tcolonNode5 = (TColon)nodeArrayList3.get(0);
        ptypeNode6 = (PType)nodeArrayList4.get(0);
        tsemiNode7 = (TSemi)nodeArrayList5.get(0);

        pvariabledefinitionNode1 = new AVarVariableDefinition(tvariableNode2, tidentifierNode3, listNode4, tcolonNode5, ptypeNode6, tsemiNode7);
        }
	nodeList.add(pvariabledefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new81() /* reduce AAvarvariabledefinition2VariableDefinition */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVariableDefinition pvariabledefinitionNode1;
        {
            // Block
        TVariable tvariableNode2;
        TIdentifier tidentifierNode3;
        LinkedList listNode5 = new LinkedList();
        TColon tcolonNode6;
        PType ptypeNode7;
        TSemi tsemiNode8;
        tvariableNode2 = (TVariable)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        tcolonNode6 = (TColon)nodeArrayList4.get(0);
        ptypeNode7 = (PType)nodeArrayList5.get(0);
        tsemiNode8 = (TSemi)nodeArrayList6.get(0);

        pvariabledefinitionNode1 = new AVarVariableDefinition(tvariableNode2, tidentifierNode3, listNode5, tcolonNode6, ptypeNode7, tsemiNode8);
        }
	nodeList.add(pvariabledefinitionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new82() /* reduce AFuncDeclFunctionDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFunctionDeclaration pfunctiondeclarationNode1;
        {
            // Block
        PHeader pheaderNode2;
        TSemi tsemiNode3;
        pheaderNode2 = (PHeader)nodeArrayList1.get(0);
        tsemiNode3 = (TSemi)nodeArrayList2.get(0);

        pfunctiondeclarationNode1 = new AFuncDeclFunctionDeclaration(pheaderNode2, tsemiNode3);
        }
	nodeList.add(pfunctiondeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new83() /* reduce AAfunccallfunccall1FuncCall */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncCall pfunccallNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TLPar tlparNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRPar trparNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode5 = (TRPar)nodeArrayList3.get(0);

        pfunccallNode1 = new AFuncCallFuncCall(tidentifierNode2, tlparNode3, null, trparNode5);
        }
	nodeList.add(pfunccallNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new84() /* reduce AAfunccallfunccall2FuncCall */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncCall pfunccallNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TLPar tlparNode3;
        PFuncCallExpr pfunccallexprNode4;
        TRPar trparNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pfunccallexprNode4 = (PFuncCallExpr)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pfunccallNode1 = new AFuncCallFuncCall(tidentifierNode2, tlparNode3, pfunccallexprNode4, trparNode5);
        }
	nodeList.add(pfunccallNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new85() /* reduce AAexprcommaexprfunccallexpr1FuncCallExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncCallExpr pfunccallexprNode1;
        {
            // Block
        PExpr pexprNode2;
        LinkedList listNode3 = new LinkedList();
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block
        }

        pfunccallexprNode1 = new AExprCommaExprFuncCallExpr(pexprNode2, listNode3);
        }
	nodeList.add(pfunccallexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new86() /* reduce AAexprcommaexprfunccallexpr2FuncCallExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFuncCallExpr pfunccallexprNode1;
        {
            // Block
        PExpr pexprNode2;
        LinkedList listNode4 = new LinkedList();
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pfunccallexprNode1 = new AExprCommaExprFuncCallExpr(pexprNode2, listNode4);
        }
	nodeList.add(pfunccallexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new87() /* reduce ACommaExprCommaExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCommaExpr pcommaexprNode1;
        {
            // Block
        TComma tcommaNode2;
        PExpr pexprNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);

        pcommaexprNode1 = new ACommaExprCommaExpr(tcommaNode2, pexprNode3);
        }
	nodeList.add(pcommaexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new88() /* reduce AIdLValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLValue plvalueNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        plvalueNode1 = new AIdLValue(tidentifierNode2);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new89() /* reduce AStringLiteralLValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLValue plvalueNode1;
        {
            // Block
        TConstString tconststringNode2;
        tconststringNode2 = (TConstString)nodeArrayList1.get(0);

        plvalueNode1 = new AStringLiteralLValue(tconststringNode2);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new90() /* reduce ALValueLValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PLValue plvalueNode1;
        {
            // Block
        PLValue plvalueNode2;
        TLBkt tlbktNode3;
        PExpr pexprNode4;
        TRBkt trbktNode5;
        plvalueNode2 = (PLValue)nodeArrayList1.get(0);
        tlbktNode3 = (TLBkt)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trbktNode5 = (TRBkt)nodeArrayList4.get(0);

        plvalueNode1 = new ALValueLValue(plvalueNode2, tlbktNode3, pexprNode4, trbktNode5);
        }
	nodeList.add(plvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new91() /* reduce ATerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	if(pstmtNode1 != null)
	{
	  listNode2.add(pstmtNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new92() /* reduce ANonTerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PStmt pstmtNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstmtNode2 = (PStmt)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstmtNode2 != null)
	{
	  listNode3.add(pstmtNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new93() /* reduce ATerminal$LocalDefinition */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PLocalDefinition plocaldefinitionNode1;
        plocaldefinitionNode1 = (PLocalDefinition)nodeArrayList1.get(0);
	if(plocaldefinitionNode1 != null)
	{
	  listNode2.add(plocaldefinitionNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new94() /* reduce ANonTerminal$LocalDefinition */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PLocalDefinition plocaldefinitionNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        plocaldefinitionNode2 = (PLocalDefinition)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(plocaldefinitionNode2 != null)
	{
	  listNode3.add(plocaldefinitionNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new95() /* reduce ATerminal$SemiFunctionParameters */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PSemiFunctionParameters psemifunctionparametersNode1;
        psemifunctionparametersNode1 = (PSemiFunctionParameters)nodeArrayList1.get(0);
	if(psemifunctionparametersNode1 != null)
	{
	  listNode2.add(psemifunctionparametersNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new96() /* reduce ANonTerminal$SemiFunctionParameters */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PSemiFunctionParameters psemifunctionparametersNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        psemifunctionparametersNode2 = (PSemiFunctionParameters)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(psemifunctionparametersNode2 != null)
	{
	  listNode3.add(psemifunctionparametersNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new97() /* reduce ATerminal$CommaIdentifier */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PCommaIdentifier pcommaidentifierNode1;
        pcommaidentifierNode1 = (PCommaIdentifier)nodeArrayList1.get(0);
	if(pcommaidentifierNode1 != null)
	{
	  listNode2.add(pcommaidentifierNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new98() /* reduce ANonTerminal$CommaIdentifier */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PCommaIdentifier pcommaidentifierNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcommaidentifierNode2 = (PCommaIdentifier)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcommaidentifierNode2 != null)
	{
	  listNode3.add(pcommaidentifierNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new99() /* reduce ATerminal$ConstIntBrackets */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PConstIntBrackets pconstintbracketsNode1;
        pconstintbracketsNode1 = (PConstIntBrackets)nodeArrayList1.get(0);
	if(pconstintbracketsNode1 != null)
	{
	  listNode2.add(pconstintbracketsNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new100() /* reduce ANonTerminal$ConstIntBrackets */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PConstIntBrackets pconstintbracketsNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pconstintbracketsNode2 = (PConstIntBrackets)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pconstintbracketsNode2 != null)
	{
	  listNode3.add(pconstintbracketsNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new101() /* reduce ATerminal$CommaExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PCommaExpr pcommaexprNode1;
        pcommaexprNode1 = (PCommaExpr)nodeArrayList1.get(0);
	if(pcommaexprNode1 != null)
	{
	  listNode2.add(pcommaexprNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new102() /* reduce ANonTerminal$CommaExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PCommaExpr pcommaexprNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcommaexprNode2 = (PCommaExpr)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcommaexprNode2 != null)
	{
	  listNode3.add(pcommaexprNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {36, SHIFT, 1}, },
			{{-1, ERROR, 1}, {40, SHIFT, 5}, },
			{{-1, ERROR, 2}, {42, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 4}, {15, SHIFT, 6}, {36, SHIFT, 1}, {39, SHIFT, 7}, },
			{{-1, ERROR, 5}, {13, SHIFT, 15}, },
			{{-1, ERROR, 6}, {15, SHIFT, 6}, {16, SHIFT, 16}, {19, SHIFT, 17}, {24, SHIFT, 18}, {30, SHIFT, 19}, {33, SHIFT, 20}, {38, SHIFT, 21}, {40, SHIFT, 22}, },
			{{-1, ERROR, 7}, {40, SHIFT, 29}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 10}, {15, SHIFT, 6}, {19, SHIFT, 30}, {36, SHIFT, 1}, {39, SHIFT, 7}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 78}, },
			{{-1, ERROR, 14}, {15, SHIFT, 6}, {36, SHIFT, 1}, {39, SHIFT, 7}, },
			{{-1, ERROR, 15}, {14, SHIFT, 33}, {37, SHIFT, 34}, {40, SHIFT, 35}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 89}, },
			{{-1, ERROR, 19}, {0, SHIFT, 38}, {1, SHIFT, 39}, {13, SHIFT, 40}, {22, SHIFT, 41}, {23, SHIFT, 42}, {24, SHIFT, 18}, {29, SHIFT, 43}, {40, SHIFT, 22}, },
			{{-1, ERROR, 20}, {0, SHIFT, 38}, {1, SHIFT, 39}, {13, SHIFT, 40}, {22, SHIFT, 41}, {23, SHIFT, 42}, {24, SHIFT, 18}, {29, SHIFT, 43}, {40, SHIFT, 22}, },
			{{-1, ERROR, 21}, {0, SHIFT, 38}, {1, SHIFT, 39}, {13, SHIFT, 57}, {19, SHIFT, 58}, {22, SHIFT, 41}, {23, SHIFT, 42}, {24, SHIFT, 18}, {40, SHIFT, 22}, },
			{{-1, REDUCE, 88}, {13, SHIFT, 60}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 91}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 26}, {19, SHIFT, 61}, },
			{{-1, ERROR, 27}, {6, SHIFT, 62}, {17, SHIFT, 63}, },
			{{-1, ERROR, 28}, {15, SHIFT, 6}, {16, SHIFT, 64}, {19, SHIFT, 17}, {24, SHIFT, 18}, {30, SHIFT, 19}, {33, SHIFT, 20}, {38, SHIFT, 21}, {40, SHIFT, 22}, },
			{{-1, ERROR, 29}, {20, SHIFT, 66}, {21, SHIFT, 67}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 94}, },
			{{-1, ERROR, 33}, {21, SHIFT, 70}, },
			{{-1, ERROR, 34}, {40, SHIFT, 71}, },
			{{-1, ERROR, 35}, {20, SHIFT, 66}, {21, SHIFT, 72}, },
			{{-1, ERROR, 36}, {14, SHIFT, 74}, },
			{{-1, REDUCE, 57}, {19, SHIFT, 75}, },
			{{-1, ERROR, 38}, {22, SHIFT, 41}, {23, SHIFT, 42}, {24, SHIFT, 18}, {40, SHIFT, 22}, },
			{{-1, ERROR, 39}, {22, SHIFT, 41}, {23, SHIFT, 42}, {24, SHIFT, 18}, {40, SHIFT, 22}, },
			{{-1, ERROR, 40}, {0, SHIFT, 38}, {1, SHIFT, 39}, {13, SHIFT, 40}, {22, SHIFT, 41}, {23, SHIFT, 42}, {24, SHIFT, 18}, {29, SHIFT, 43}, {40, SHIFT, 22}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 43}, {0, SHIFT, 38}, {1, SHIFT, 39}, {13, SHIFT, 40}, {22, SHIFT, 41}, {23, SHIFT, 42}, {24, SHIFT, 18}, {29, SHIFT, 43}, {40, SHIFT, 22}, },
			{{-1, ERROR, 44}, {0, SHIFT, 83}, {1, SHIFT, 84}, {7, SHIFT, 85}, {8, SHIFT, 86}, {9, SHIFT, 87}, {10, SHIFT, 88}, {11, SHIFT, 89}, {12, SHIFT, 90}, },
			{{-1, REDUCE, 22}, {2, SHIFT, 92}, {4, SHIFT, 93}, {5, SHIFT, 94}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 49}, {28, SHIFT, 95}, {31, SHIFT, 96}, },
			{{-1, REDUCE, 38}, {27, SHIFT, 97}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 36}, {17, SHIFT, 63}, },
			{{-1, ERROR, 56}, {28, SHIFT, 95}, {34, SHIFT, 98}, },
			{{-1, ERROR, 57}, {0, SHIFT, 38}, {1, SHIFT, 39}, {13, SHIFT, 57}, {22, SHIFT, 41}, {23, SHIFT, 42}, {24, SHIFT, 18}, {40, SHIFT, 22}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 59}, {0, SHIFT, 83}, {1, SHIFT, 84}, {19, SHIFT, 100}, },
			{{-1, ERROR, 60}, {0, SHIFT, 38}, {1, SHIFT, 39}, {13, SHIFT, 57}, {14, SHIFT, 101}, {22, SHIFT, 41}, {23, SHIFT, 42}, {24, SHIFT, 18}, {40, SHIFT, 22}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 62}, {0, SHIFT, 38}, {1, SHIFT, 39}, {13, SHIFT, 57}, {22, SHIFT, 41}, {23, SHIFT, 42}, {24, SHIFT, 18}, {40, SHIFT, 22}, },
			{{-1, ERROR, 63}, {0, SHIFT, 38}, {1, SHIFT, 39}, {13, SHIFT, 57}, {22, SHIFT, 41}, {23, SHIFT, 42}, {24, SHIFT, 18}, {40, SHIFT, 22}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 92}, },
			{{-1, ERROR, 66}, {40, SHIFT, 106}, },
			{{-1, ERROR, 67}, {25, SHIFT, 107}, {26, SHIFT, 108}, },
			{{-1, REDUCE, 97}, },
			{{-1, ERROR, 69}, {20, SHIFT, 66}, {21, SHIFT, 111}, },
			{{-1, ERROR, 70}, {25, SHIFT, 107}, {26, SHIFT, 108}, {35, SHIFT, 113}, },
			{{-1, ERROR, 71}, {20, SHIFT, 66}, {21, SHIFT, 116}, },
			{{-1, ERROR, 72}, {25, SHIFT, 107}, {26, SHIFT, 108}, },
			{{-1, ERROR, 73}, {20, SHIFT, 66}, {21, SHIFT, 120}, },
			{{-1, ERROR, 74}, {21, SHIFT, 121}, },
			{{-1, ERROR, 75}, {37, SHIFT, 34}, {40, SHIFT, 35}, },
			{{-1, REDUCE, 95}, },
			{{-1, REDUCE, 58}, {19, SHIFT, 75}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 80}, {0, SHIFT, 83}, {1, SHIFT, 84}, {7, SHIFT, 85}, {8, SHIFT, 86}, {9, SHIFT, 87}, {10, SHIFT, 88}, {11, SHIFT, 89}, {12, SHIFT, 90}, {14, SHIFT, 124}, },
			{{-1, ERROR, 81}, {14, SHIFT, 125}, {28, SHIFT, 95}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 83}, {0, SHIFT, 38}, {1, SHIFT, 39}, {13, SHIFT, 57}, {22, SHIFT, 41}, {23, SHIFT, 42}, {24, SHIFT, 18}, {40, SHIFT, 22}, },
			{{-1, ERROR, 84}, {0, SHIFT, 38}, {1, SHIFT, 39}, {13, SHIFT, 57}, {22, SHIFT, 41}, {23, SHIFT, 42}, {24, SHIFT, 18}, {40, SHIFT, 22}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 91}, {0, SHIFT, 38}, {1, SHIFT, 39}, {13, SHIFT, 57}, {22, SHIFT, 41}, {23, SHIFT, 42}, {24, SHIFT, 18}, {40, SHIFT, 22}, },
			{{-1, ERROR, 92}, {0, SHIFT, 38}, {1, SHIFT, 39}, {13, SHIFT, 57}, {22, SHIFT, 41}, {23, SHIFT, 42}, {24, SHIFT, 18}, {40, SHIFT, 22}, },
			{{-1, ERROR, 93}, {0, SHIFT, 38}, {1, SHIFT, 39}, {13, SHIFT, 57}, {22, SHIFT, 41}, {23, SHIFT, 42}, {24, SHIFT, 18}, {40, SHIFT, 22}, },
			{{-1, ERROR, 94}, {0, SHIFT, 38}, {1, SHIFT, 39}, {13, SHIFT, 57}, {22, SHIFT, 41}, {23, SHIFT, 42}, {24, SHIFT, 18}, {40, SHIFT, 22}, },
			{{-1, ERROR, 95}, {0, SHIFT, 38}, {1, SHIFT, 39}, {13, SHIFT, 40}, {22, SHIFT, 41}, {23, SHIFT, 42}, {24, SHIFT, 18}, {29, SHIFT, 43}, {40, SHIFT, 22}, },
			{{-1, ERROR, 96}, {15, SHIFT, 6}, {19, SHIFT, 133}, {24, SHIFT, 18}, {30, SHIFT, 134}, {33, SHIFT, 135}, {38, SHIFT, 136}, {40, SHIFT, 22}, },
			{{-1, ERROR, 97}, {0, SHIFT, 38}, {1, SHIFT, 39}, {13, SHIFT, 40}, {22, SHIFT, 41}, {23, SHIFT, 42}, {24, SHIFT, 18}, {29, SHIFT, 43}, {40, SHIFT, 22}, },
			{{-1, ERROR, 98}, {15, SHIFT, 6}, {19, SHIFT, 17}, {24, SHIFT, 18}, {30, SHIFT, 19}, {33, SHIFT, 20}, {38, SHIFT, 21}, {40, SHIFT, 22}, },
			{{-1, ERROR, 99}, {0, SHIFT, 83}, {1, SHIFT, 84}, {14, SHIFT, 124}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 85}, {0, SHIFT, 83}, {1, SHIFT, 84}, {20, SHIFT, 144}, },
			{{-1, ERROR, 103}, {14, SHIFT, 147}, },
			{{-1, ERROR, 104}, {0, SHIFT, 83}, {1, SHIFT, 84}, {19, SHIFT, 148}, },
			{{-1, ERROR, 105}, {0, SHIFT, 83}, {1, SHIFT, 84}, {18, SHIFT, 149}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 69}, {17, SHIFT, 150}, },
			{{-1, ERROR, 110}, {19, SHIFT, 153}, },
			{{-1, ERROR, 111}, {25, SHIFT, 107}, {26, SHIFT, 108}, },
			{{-1, REDUCE, 98}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 65}, },
			{{-1, ERROR, 116}, {25, SHIFT, 107}, {26, SHIFT, 108}, },
			{{-1, ERROR, 117}, {20, SHIFT, 66}, {21, SHIFT, 156}, },
			{{-1, REDUCE, 71}, {17, SHIFT, 157}, },
			{{-1, REDUCE, 60}, },
			{{-1, ERROR, 120}, {25, SHIFT, 107}, {26, SHIFT, 108}, },
			{{-1, ERROR, 121}, {25, SHIFT, 107}, {26, SHIFT, 108}, {35, SHIFT, 113}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 96}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 23}, {2, SHIFT, 92}, {4, SHIFT, 93}, {5, SHIFT, 94}, },
			{{-1, REDUCE, 24}, {2, SHIFT, 92}, {4, SHIFT, 93}, {5, SHIFT, 94}, },
			{{-1, REDUCE, 46}, {0, SHIFT, 83}, {1, SHIFT, 84}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 39}, {27, SHIFT, 97}, },
			{{-1, REDUCE, 4}, {32, REDUCE, 14}, },
			{{-1, ERROR, 134}, {0, SHIFT, 38}, {1, SHIFT, 39}, {13, SHIFT, 40}, {22, SHIFT, 41}, {23, SHIFT, 42}, {24, SHIFT, 18}, {29, SHIFT, 43}, {40, SHIFT, 22}, },
			{{-1, ERROR, 135}, {0, SHIFT, 38}, {1, SHIFT, 39}, {13, SHIFT, 40}, {22, SHIFT, 41}, {23, SHIFT, 42}, {24, SHIFT, 18}, {29, SHIFT, 43}, {40, SHIFT, 22}, },
			{{-1, ERROR, 136}, {0, SHIFT, 38}, {1, SHIFT, 39}, {13, SHIFT, 57}, {19, SHIFT, 164}, {22, SHIFT, 41}, {23, SHIFT, 42}, {24, SHIFT, 18}, {40, SHIFT, 22}, },
			{{-1, REDUCE, 6}, {32, REDUCE, 16}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 139}, {32, SHIFT, 166}, },
			{{-1, ERROR, 140}, {19, SHIFT, 167}, },
			{{-1, ERROR, 141}, {6, SHIFT, 168}, {17, SHIFT, 63}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 144}, {0, SHIFT, 38}, {1, SHIFT, 39}, {13, SHIFT, 57}, {22, SHIFT, 41}, {23, SHIFT, 42}, {24, SHIFT, 18}, {40, SHIFT, 22}, },
			{{-1, REDUCE, 101}, },
			{{-1, REDUCE, 86}, {20, SHIFT, 144}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 90}, },
			{{-1, ERROR, 150}, {22, SHIFT, 171}, },
			{{-1, REDUCE, 99}, },
			{{-1, REDUCE, 70}, {17, SHIFT, 150}, },
			{{-1, REDUCE, 80}, },
			{{-1, ERROR, 154}, {19, SHIFT, 173}, },
			{{-1, REDUCE, 61}, },
			{{-1, ERROR, 156}, {25, SHIFT, 107}, {26, SHIFT, 108}, },
			{{-1, ERROR, 157}, {18, SHIFT, 175}, {22, SHIFT, 171}, },
			{{-1, REDUCE, 72}, {17, SHIFT, 150}, },
			{{-1, REDUCE, 73}, {17, SHIFT, 150}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 162}, {28, SHIFT, 95}, {31, SHIFT, 177}, },
			{{-1, ERROR, 163}, {28, SHIFT, 95}, {34, SHIFT, 178}, },
			{{-1, REDUCE, 10}, {32, REDUCE, 20}, },
			{{-1, ERROR, 165}, {0, SHIFT, 83}, {1, SHIFT, 84}, {19, SHIFT, 179}, },
			{{-1, ERROR, 166}, {15, SHIFT, 6}, {19, SHIFT, 17}, {24, SHIFT, 18}, {30, SHIFT, 19}, {33, SHIFT, 20}, {38, SHIFT, 21}, {40, SHIFT, 22}, },
			{{-1, REDUCE, 7}, {32, REDUCE, 17}, },
			{{-1, ERROR, 168}, {0, SHIFT, 38}, {1, SHIFT, 39}, {13, SHIFT, 57}, {22, SHIFT, 41}, {23, SHIFT, 42}, {24, SHIFT, 18}, {40, SHIFT, 22}, },
			{{-1, REDUCE, 87}, {0, SHIFT, 83}, {1, SHIFT, 84}, },
			{{-1, REDUCE, 102}, },
			{{-1, ERROR, 171}, {18, SHIFT, 182}, },
			{{-1, REDUCE, 100}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 74}, {17, SHIFT, 150}, },
			{{-1, ERROR, 177}, {15, SHIFT, 6}, {19, SHIFT, 133}, {24, SHIFT, 18}, {30, SHIFT, 134}, {33, SHIFT, 135}, {38, SHIFT, 136}, {40, SHIFT, 22}, },
			{{-1, ERROR, 178}, {15, SHIFT, 6}, {19, SHIFT, 133}, {24, SHIFT, 18}, {30, SHIFT, 134}, {33, SHIFT, 135}, {38, SHIFT, 136}, {40, SHIFT, 22}, },
			{{-1, REDUCE, 11}, {32, REDUCE, 21}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 181}, {0, SHIFT, 83}, {1, SHIFT, 84}, {19, SHIFT, 185}, },
			{{-1, REDUCE, 75}, },
			{{-1, ERROR, 183}, {32, SHIFT, 186}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 5}, {32, REDUCE, 15}, },
			{{-1, ERROR, 186}, {15, SHIFT, 6}, {19, SHIFT, 133}, {24, SHIFT, 18}, {30, SHIFT, 134}, {33, SHIFT, 135}, {38, SHIFT, 136}, {40, SHIFT, 22}, },
			{{-1, REDUCE, 18}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, -1}, },
			{{-1, 23}, {4, 8}, {10, 8}, {14, 31}, {96, 137}, {177, 137}, {178, 137}, {186, 137}, },
			{{-1, 138}, {6, 24}, {28, 65}, {98, 143}, {166, 180}, {178, 143}, {186, 180}, },
			{{-1, 25}, },
			{{-1, 139}, {177, 183}, {178, 184}, {186, 187}, },
			{{-1, 44}, {21, 59}, {40, 80}, {57, 99}, {60, 102}, {62, 104}, {63, 105}, {91, 128}, {136, 165}, {144, 169}, {168, 181}, },
			{{-1, 45}, {83, 126}, {84, 127}, },
			{{-1, 46}, {92, 129}, {93, 130}, {94, 131}, },
			{{-1, 47}, },
			{{-1, 48}, {38, 78}, {39, 79}, },
			{{-1, 49}, {20, 56}, {40, 81}, {134, 162}, {135, 163}, },
			{{-1, 50}, {95, 132}, },
			{{-1, 51}, {43, 82}, {97, 142}, },
			{{-1, 52}, },
			{{-1, 53}, },
			{{-1, 91}, },
			{{-1, 9}, {0, 3}, },
			{{-1, 10}, {0, 4}, },
			{{-1, 36}, },
			{{-1, 76}, {77, 123}, },
			{{-1, 37}, {75, 122}, },
			{{-1, 68}, {69, 112}, {73, 112}, {117, 112}, },
			{{-1, 114}, {121, 161}, },
			{{-1, 118}, {67, 109}, {70, 115}, {111, 109}, {121, 115}, },
			{{-1, 110}, {111, 154}, },
			{{-1, 119}, {116, 155}, {120, 160}, {156, 174}, },
			{{-1, 151}, {152, 172}, {159, 172}, {176, 172}, },
			{{-1, 158}, },
			{{-1, 11}, {14, 32}, },
			{{-1, 12}, },
			{{-1, 13}, },
			{{-1, 54}, {6, 26}, {28, 26}, {96, 140}, {98, 26}, {166, 26}, {177, 140}, {178, 140}, {186, 140}, },
			{{-1, 103}, },
			{{-1, 145}, {146, 170}, },
			{{-1, 55}, {6, 27}, {28, 27}, {96, 141}, {98, 27}, {166, 27}, {177, 141}, {178, 141}, {186, 141}, },
			{{-1, 28}, },
			{{-1, 14}, },
			{{-1, 77}, },
			{{-1, 69}, {35, 73}, {71, 117}, },
			{{-1, 152}, {118, 159}, {158, 176}, },
			{{-1, 146}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'fun'",
			"expecting: identifier",
			"expecting: EOF",
			"expecting: '{', 'fun', 'var'",
			"expecting: '('",
			"expecting: '{', '}', ';', const string, 'if', 'while', 'return', identifier",
			"expecting: '{', 'fun', 'var', EOF",
			"expecting: '{', ';', 'fun', 'var'",
			"expecting: ')', 'ref', identifier",
			"expecting: '{', '}', ';', const string, 'if', 'else', 'while', 'fun', 'return', 'var', identifier, EOF",
			"expecting: '+', '-', '*', 'div', 'mod', '<-', '=', '#', '<', '<=', '>', '>=', ')', '[', ']', ';', ',', 'and', 'or', 'then', 'do'",
			"expecting: '+', '-', '(', number, const char, const string, 'not', identifier",
			"expecting: '+', '-', '(', ';', number, const char, const string, identifier",
			"expecting: '+', '-', '*', 'div', 'mod', '<-', '=', '#', '<', '<=', '>', '>=', '(', ')', '[', ']', ';', ',', 'and', 'or', 'then', 'do'",
			"expecting: ';'",
			"expecting: '<-', '['",
			"expecting: ',', ':'",
			"expecting: ':'",
			"expecting: ')'",
			"expecting: ')', ';'",
			"expecting: number, const char, const string, identifier",
			"expecting: '+', '-', '*', 'div', 'mod', '=', '#', '<', '<=', '>', '>=', ')', ']', ';', ',', 'and', 'or', 'then', 'do'",
			"expecting: '+', '-', '=', '#', '<', '<=', '>', '>='",
			"expecting: 'or', 'then'",
			"expecting: ')', 'and', 'or', 'then', 'do'",
			"expecting: '+', '-', '*', 'div', 'mod', '=', '#', '<', '<=', '>', '>=', ')', '[', ']', ';', ',', 'and', 'or', 'then', 'do'",
			"expecting: 'or', 'do'",
			"expecting: '+', '-', '(', number, const char, const string, identifier",
			"expecting: '+', '-', ';'",
			"expecting: '+', '-', '(', ')', number, const char, const string, identifier",
			"expecting: 'char', 'int'",
			"expecting: 'char', 'int', 'nothing'",
			"expecting: 'ref', identifier",
			"expecting: '+', '-', '=', '#', '<', '<=', '>', '>=', ')'",
			"expecting: ')', 'or'",
			"expecting: '{', ';', const string, 'if', 'while', 'return', identifier",
			"expecting: '+', '-', ')'",
			"expecting: '+', '-', ')', ','",
			"expecting: '+', '-', ']'",
			"expecting: ')', '{', '[', ';', 'fun', 'var'",
			"expecting: '[', ';'",
			"expecting: ')', '[', ';'",
			"expecting: '+', '-', ')', 'and', 'or', 'then', 'do'",
			"expecting: '{', '}', ';', const string, 'if', 'else', 'while', 'return', identifier",
			"expecting: 'else'",
			"expecting: ')', ','",
			"expecting: number",
			"expecting: ']', number",
			"expecting: ']'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 3, 4, 5, 1, 6, 3, 7, 3, 3, 3, 3, 8, 9, 5, 10, 11, 11, 12, 13, 5, 5, 5, 14, 15, 5, 16, 3, 6, 3, 17, 1, 16, 18, 19, 20, 20, 11, 21, 21, 11, 22, 21, 21, 21, 21, 23, 24, 24, 24, 24, 21, 25, 26, 27, 5, 28, 29, 5, 27, 27, 9, 5, 1, 30, 16, 16, 31, 16, 30, 16, 17, 32, 19, 19, 21, 21, 33, 34, 24, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 11, 35, 11, 35, 36, 5, 21, 37, 18, 28, 38, 16, 39, 39, 40, 14, 30, 16, 7, 7, 7, 30, 16, 41, 19, 30, 31, 19, 19, 21, 24, 21, 21, 42, 21, 21, 21, 24, 43, 11, 11, 12, 43, 5, 44, 14, 15, 24, 5, 27, 45, 45, 21, 5, 10, 46, 41, 40, 3, 14, 19, 30, 47, 41, 41, 19, 7, 23, 26, 43, 28, 35, 43, 27, 37, 45, 48, 41, 3, 19, 41, 41, 35, 35, 43, 5, 28, 41, 44, 44, 43, 35, 44, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
