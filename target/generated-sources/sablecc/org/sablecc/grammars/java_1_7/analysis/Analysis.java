/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.grammars.java_1_7.analysis;

import org.sablecc.grammars.java_1_7.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseTComment(TComment node);
    void caseTAbstractKeyword(TAbstractKeyword node);
    void caseTAssertKeyword(TAssertKeyword node);
    void caseTBooleanKeyword(TBooleanKeyword node);
    void caseTBreakKeyword(TBreakKeyword node);
    void caseTByteKeyword(TByteKeyword node);
    void caseTCaseKeyword(TCaseKeyword node);
    void caseTCatchKeyword(TCatchKeyword node);
    void caseTCharKeyword(TCharKeyword node);
    void caseTClassKeyword(TClassKeyword node);
    void caseTConstKeyword(TConstKeyword node);
    void caseTContinueKeyword(TContinueKeyword node);
    void caseTDefaultKeyword(TDefaultKeyword node);
    void caseTDoKeyword(TDoKeyword node);
    void caseTDoubleKeyword(TDoubleKeyword node);
    void caseTElseKeyword(TElseKeyword node);
    void caseTEnumKeyword(TEnumKeyword node);
    void caseTExtendsKeyword(TExtendsKeyword node);
    void caseTFinalKeyword(TFinalKeyword node);
    void caseTFinallyKeyword(TFinallyKeyword node);
    void caseTFloatKeyword(TFloatKeyword node);
    void caseTForKeyword(TForKeyword node);
    void caseTIfKeyword(TIfKeyword node);
    void caseTGotoKeyword(TGotoKeyword node);
    void caseTImplementsKeyword(TImplementsKeyword node);
    void caseTImportKeyword(TImportKeyword node);
    void caseTInstanceofKeyword(TInstanceofKeyword node);
    void caseTIntKeyword(TIntKeyword node);
    void caseTInterfaceKeyword(TInterfaceKeyword node);
    void caseTLongKeyword(TLongKeyword node);
    void caseTNativeKeyword(TNativeKeyword node);
    void caseTNewKeyword(TNewKeyword node);
    void caseTPackageKeyword(TPackageKeyword node);
    void caseTPrivateKeyword(TPrivateKeyword node);
    void caseTProtectedKeyword(TProtectedKeyword node);
    void caseTPublicKeyword(TPublicKeyword node);
    void caseTReturnKeyword(TReturnKeyword node);
    void caseTShortKeyword(TShortKeyword node);
    void caseTStaticKeyword(TStaticKeyword node);
    void caseTStrictfpKeyword(TStrictfpKeyword node);
    void caseTSuperKeyword(TSuperKeyword node);
    void caseTSwitchKeyword(TSwitchKeyword node);
    void caseTSynchronizedKeyword(TSynchronizedKeyword node);
    void caseTThisKeyword(TThisKeyword node);
    void caseTThrowKeyword(TThrowKeyword node);
    void caseTThrowsKeyword(TThrowsKeyword node);
    void caseTTransientKeyword(TTransientKeyword node);
    void caseTTryKeyword(TTryKeyword node);
    void caseTVoidKeyword(TVoidKeyword node);
    void caseTVolatileKeyword(TVolatileKeyword node);
    void caseTWhileKeyword(TWhileKeyword node);
    void caseTIntegerLiteral(TIntegerLiteral node);
    void caseTFloatingPointLiteral(TFloatingPointLiteral node);
    void caseTBooleanLiteral(TBooleanLiteral node);
    void caseTCharacterLiteral(TCharacterLiteral node);
    void caseTStringLiteral(TStringLiteral node);
    void caseTNullLiteral(TNullLiteral node);
    void caseTIdentifier(TIdentifier node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBrc(TLBrc node);
    void caseTRBrc(TRBrc node);
    void caseTLBkt(TLBkt node);
    void caseTRBkt(TRBkt node);
    void caseTSemi(TSemi node);
    void caseTComma(TComma node);
    void caseTDot(TDot node);
    void caseTAssign(TAssign node);
    void caseTLt(TLt node);
    void caseTGt(TGt node);
    void caseTEmark(TEmark node);
    void caseTTilde(TTilde node);
    void caseTQmark(TQmark node);
    void caseTColon(TColon node);
    void caseTEq(TEq node);
    void caseTLteq(TLteq node);
    void caseTGteq(TGteq node);
    void caseTNeq(TNeq node);
    void caseTAmpAmp(TAmpAmp node);
    void caseTBarBar(TBarBar node);
    void caseTPlusPlus(TPlusPlus node);
    void caseTMinusMinus(TMinusMinus node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTStar(TStar node);
    void caseTSlash(TSlash node);
    void caseTAmp(TAmp node);
    void caseTBar(TBar node);
    void caseTCaret(TCaret node);
    void caseTPercent(TPercent node);
    void caseTShl(TShl node);
    void caseTShr(TShr node);
    void caseTUshr(TUshr node);
    void caseTPlusAssign(TPlusAssign node);
    void caseTMinusAssign(TMinusAssign node);
    void caseTStarAssign(TStarAssign node);
    void caseTSlashAssign(TSlashAssign node);
    void caseTAmpAssign(TAmpAssign node);
    void caseTBarAssign(TBarAssign node);
    void caseTCaretAssign(TCaretAssign node);
    void caseTPercentAssign(TPercentAssign node);
    void caseTShlAssign(TShlAssign node);
    void caseTShrAssign(TShrAssign node);
    void caseTUshrAssign(TUshrAssign node);
    void caseTDotDotDot(TDotDotDot node);
    void caseTAt(TAt node);
    void caseTWhiteSpaces(TWhiteSpaces node);
    void caseEOF(EOF node);
}
