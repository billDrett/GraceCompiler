Package compiler;

Helpers
    unicode_input_character = [0..0xffff];
    ht  = 0x0009;
    lf  = 0x000a;
    ff  = 0x000c;
    cr  = 0x000d;
    sp  = ' ';


    line_terminator = lf | cr | cr lf;
    input_character = [unicode_input_character - [cr + lf]];

    not_dollar = [input_character - '$'];
    not_double_dollar = [unicode_input_character - ['$' + '$']];

    white_space = (sp | ht | ff | line_terminator);

    traditional_comment = '$' '$' not_double_dollar* '$' '$';

    end_of_line_comment = '$' not_dollar input_character* line_terminator?;

    digit = ['0'..'9'];
    lowercase = ['a'..'z'];
    uppercase = ['A'..'Z'];
    letter  = lowercase | uppercase | '_' | digit*;

Tokens
    comment = end_of_line_comment | traditional_comment;

    number = '0' | [digit-'0'] digit*;
    plus = '+';
    minus = '-';
    mult = '*';
    division = '/';
    div = 'div';
    mod = 'mod';

    assign = '<-';
    equal = '=';
    n_equal =  '<>';
    less = '<';
    less_equal = '<=';
    greater = '>';
    greater_equal = '>=';
    hash = '#';

    l_par = '(';
    r_par = ')';
    l_brc = '{';
    r_brc = '}';
    l_bkt = '[';
    r_bkt = ']';
    semi = ';';
    comma = ',';
    colon = ':';

    char = 'char';
    int = 'int';

    and = 'and';
    or = 'or';
    not = 'not';

    if = 'if';
    then = 'then';
    else = 'else';

    while = 'while';
    do = 'do';

    nothing = 'nothing';

    function = 'fun';

    reference = 'ref';

    return = 'return';

    variable = 'var';

   // blank = (' ' |13 | 10 | '\t' | 9 | 32)+;
    identifier = (lowercase |  uppercase) letter*;
    white_spaces = white_space+;

Ignored Tokens
   white_spaces;

	/*
Productions
   expr = {factor} factor
        | {plus} expr plus factor
        | {minus} expr minus factor;

   factor =
        {term} term
        | {mult} factor mult term
        | {div} factor div term
        | {mod} factor mod term;

   term = {number} number
        | {expr} l_par expr r_par;

/*
Helpers
  sp = ' ';
  lf = 0x000a;
  cr = 0x000d;
  ff = 0x000c;
  ht = 0x0009;
  line_terminator = lf | cr | cr lf;
  white_space = (sp | ht | ff | line_terminator)*;

Tokens
  white_space = white_space;

Ignored Tokens
  white_space;*/
